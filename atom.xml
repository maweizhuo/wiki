<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>马伟倬 wiki</title>
  
  <subtitle>马伟倬的个人wiki</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wiki.maweizhuo.com/"/>
  <updated>2018-01-15T09:36:14.000Z</updated>
  <id>http://wiki.maweizhuo.com/</id>
  
  <author>
    <name>weizhuo.ma</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mongodb 增删改查</title>
    <link href="http://wiki.maweizhuo.com/posts/mongodb%20%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
    <id>http://wiki.maweizhuo.com/posts/mongodb 增删改查/</id>
    <published>2018-01-15T02:53:30.000Z</published>
    <updated>2018-01-15T09:36:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建-删除数据库"><a class="header-anchor" href="#创建-删除数据库"></a>创建/删除数据库</h2><ul><li><strong>创建</strong><br>use DATABASE_NAME<br>如果数据库不存在，则创建数据库，否则切换到指定数据库。<br>MongoDB 中<code>默认的数据库为 test</code>，如果你没有创建新的数据库，集合将存放在 test 数据库中。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line">&gt; <span class="keyword">use</span> <span class="title">runoob</span></span><br><span class="line"><span class="title">switched</span> <span class="title">to</span> <span class="title">db</span> <span class="title">runoob</span></span><br><span class="line">&gt; <span class="title">db</span></span><br><span class="line"><span class="title">runoob</span></span><br><span class="line">&gt; </span><br><span class="line"></span><br><span class="line">**你想查看所有数据库，可以使用 <span class="title">show</span> <span class="title">dbs</span> 命令：**</span><br><span class="line"></span><br><span class="line">&gt; <span class="title">show</span> <span class="title">dbs</span></span><br><span class="line"><span class="title">local</span>  0.078<span class="title">GB</span></span><br><span class="line"><span class="title">test</span>   0.078<span class="title">GB</span></span><br><span class="line">&gt; </span><br><span class="line"></span><br><span class="line">//可以看到，我们刚创建的数据库 <span class="title">runoob</span> 并不在数据库的列表中，</span><br><span class="line">//要显示它，我们需要向 <span class="title">runoob</span> 数据库插入一些数据。</span><br></pre></td></tr></table></figure><ul><li><strong>删除数据库</strong><br>db.dropDatabase()</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; show dbs</span><br><span class="line">local   <span class="number">0.078</span>GB</span><br><span class="line">runoob  <span class="number">0.078</span>GB</span><br><span class="line">test    <span class="number">0.078</span>GB</span><br><span class="line">&gt; <span class="keyword">use</span> <span class="title">runoob</span></span><br><span class="line"><span class="title">switched</span> <span class="title">to</span> <span class="title">db</span> <span class="title">runoob</span></span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="title">db</span>.<span class="title">dropDatabase</span>()</span><br><span class="line">&#123; "<span class="title">dropped</span>" : "<span class="title">runoob</span>", "<span class="title">ok</span>" : 1 &#125;</span><br><span class="line">&gt; <span class="title">show</span> <span class="title">dbs</span></span><br><span class="line"><span class="title">local</span>  0.078<span class="title">GB</span></span><br><span class="line"><span class="title">test</span>   0.078<span class="title">GB</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>删除集合</strong><br>mongo 里说的集合 = MySQL里的表<br>db.collection.drop()</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line">&gt; <span class="keyword">use</span> <span class="title">runoob</span></span><br><span class="line"><span class="title">switched</span> <span class="title">to</span> <span class="title">db</span> <span class="title">runoob</span></span><br><span class="line">&gt; <span class="title">show</span> <span class="title">tables</span></span><br><span class="line"><span class="title">user</span></span><br><span class="line">&gt; <span class="title">db</span>.<span class="title">user</span>.<span class="title">drop</span>()</span><br><span class="line"><span class="title">true</span></span><br><span class="line">&gt; <span class="title">show</span> <span class="title">tables</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h2 id="插入文档"><a class="header-anchor" href="#插入文档"></a>插入文档</h2><p>db.col.insert()<br>db.collection.insertOne():向指定集合中插入一条文档数据<br>db.collection.insertMany():向指定集合中插入多条文档数据</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// insert() 插入,find() 查询, pretty()格式化</span></span><br><span class="line">&gt; db.user.insert(&#123;<span class="string">'id'</span>:<span class="number">1</span>,<span class="string">'age'</span>:<span class="number">12</span>,<span class="string">'name'</span>:<span class="string">'maweizhuo'</span>&#125;)</span><br><span class="line">WriteResult(&#123; <span class="string">"nInserted"</span> : <span class="number">1</span> &#125;)</span><br><span class="line">&gt; db.user.find()</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a58163b9a948caad01e31b4"</span>), <span class="string">"id"</span> : <span class="number">1</span>, <span class="string">"age"</span> : <span class="number">12</span>, <span class="string">"name"</span> : <span class="string">"maweizhuo"</span> &#125;</span><br><span class="line">&gt; db.user.find().pretty()</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"_id"</span> : ObjectId(<span class="string">"5a58163b9a948caad01e31b4"</span>),</span><br><span class="line"><span class="string">"id"</span> : <span class="number">1</span>,</span><br><span class="line"><span class="string">"age"</span> : <span class="number">12</span>,</span><br><span class="line"><span class="string">"name"</span> : <span class="string">"maweizhuo"</span></span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">// insertOne </span></span><br><span class="line">&gt; db.user.insertOne(&#123;<span class="string">'id'</span>:<span class="number">2</span>,<span class="string">'age'</span>:<span class="number">13</span>,<span class="string">'name'</span>:<span class="string">'maweizhuo1'</span>&#125;)</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"acknowledged"</span> : <span class="keyword">true</span>,</span><br><span class="line"><span class="string">"insertedId"</span> : ObjectId(<span class="string">"5a581a159a948caad01e31b5"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&gt; db.user.find().pretty()</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"_id"</span> : ObjectId(<span class="string">"5a58163b9a948caad01e31b4"</span>),</span><br><span class="line"><span class="string">"id"</span> : <span class="number">1</span>,</span><br><span class="line"><span class="string">"age"</span> : <span class="number">12</span>,</span><br><span class="line"><span class="string">"name"</span> : <span class="string">"maweizhuo"</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"_id"</span> : ObjectId(<span class="string">"5a581a159a948caad01e31b5"</span>),</span><br><span class="line"><span class="string">"id"</span> : <span class="number">2</span>,</span><br><span class="line"><span class="string">"age"</span> : <span class="number">13</span>,</span><br><span class="line"><span class="string">"name"</span> : <span class="string">"maweizhuo1"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入多条记录</span></span><br><span class="line">&gt; db.user.insertMany([&#123;<span class="string">'id'</span>:<span class="number">4</span>,<span class="string">'age'</span>:<span class="number">14</span>,<span class="string">'name'</span>:<span class="string">'maweizhuo4'</span>&#125;,&#123;<span class="string">'id'</span>:<span class="number">5</span>,<span class="string">'age'</span>:<span class="number">15</span>,<span class="string">'name'</span>:<span class="string">'maweizhuo5'</span>&#125;])</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"acknowledged"</span> : <span class="keyword">true</span>,</span><br><span class="line"><span class="string">"insertedIds"</span> : [</span><br><span class="line">ObjectId(<span class="string">"5a581aa39a948caad01e31b6"</span>),</span><br><span class="line">ObjectId(<span class="string">"5a581aa39a948caad01e31b7"</span>)</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&gt; db.user.find().pretty()</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"_id"</span> : ObjectId(<span class="string">"5a58163b9a948caad01e31b4"</span>),</span><br><span class="line"><span class="string">"id"</span> : <span class="number">1</span>,</span><br><span class="line"><span class="string">"age"</span> : <span class="number">12</span>,</span><br><span class="line"><span class="string">"name"</span> : <span class="string">"maweizhuo"</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"_id"</span> : ObjectId(<span class="string">"5a581a159a948caad01e31b5"</span>),</span><br><span class="line"><span class="string">"id"</span> : <span class="number">2</span>,</span><br><span class="line"><span class="string">"age"</span> : <span class="number">13</span>,</span><br><span class="line"><span class="string">"name"</span> : <span class="string">"maweizhuo1"</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"_id"</span> : ObjectId(<span class="string">"5a581aa39a948caad01e31b6"</span>),</span><br><span class="line"><span class="string">"id"</span> : <span class="number">4</span>,</span><br><span class="line"><span class="string">"age"</span> : <span class="number">14</span>,</span><br><span class="line"><span class="string">"name"</span> : <span class="string">"maweizhuo4"</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"_id"</span> : ObjectId(<span class="string">"5a581aa39a948caad01e31b7"</span>),</span><br><span class="line"><span class="string">"id"</span> : <span class="number">5</span>,</span><br><span class="line"><span class="string">"age"</span> : <span class="number">15</span>,</span><br><span class="line"><span class="string">"name"</span> : <span class="string">"maweizhuo5"</span></span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h2 id="修改"><a class="header-anchor" href="#修改"></a>修改</h2><p>MongoDB 使用 <code>update() 和 save()</code> 方法来更新集合中的文档</p><ul><li><strong>update</strong><br>参数说明：<br><strong>query</strong> : update的查询条件，类似sql update查询内where后面的。<br><strong>update</strong> : update的对象和一些更新的操作符（如$,$inc…）等，也可以理解为sql update查询内set后面的<br><strong>upsert</strong> : (update+insert)可选，这个参数的意思是，<code>如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。</code><br><strong>multi</strong> : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为<code>true,就把按条件查出来多条记录全部更新</code>。<br><strong>writeConcern</strong> :可选，抛出异常的级别。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.users.insert(&#123;<span class="string">'name'</span>:<span class="string">'maweihzuo'</span>,<span class="string">'age'</span>:<span class="number">18</span>,<span class="string">'tag'</span>:[<span class="string">'mongo'</span>,<span class="string">'nosql'</span>]&#125;)</span><br><span class="line">WriteResult(&#123; <span class="string">"nInserted"</span> : <span class="number">1</span> &#125;)</span><br><span class="line">&gt; show tables</span><br><span class="line">users</span><br><span class="line">&gt; db.users.find().pretty()</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"_id"</span> : ObjectId(<span class="string">"5a59ac4bc52de95ef9c85bfd"</span>),</span><br><span class="line"><span class="string">"name"</span> : <span class="string">"maweihzuo"</span>,</span><br><span class="line"><span class="string">"age"</span> : <span class="number">18</span>,</span><br><span class="line"><span class="string">"tag"</span> : [</span><br><span class="line"><span class="string">"mongo"</span>,</span><br><span class="line"><span class="string">"nosql"</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// update</span></span><br><span class="line">----修改的数据没加$set标记,数据直接变为替换了,缺失name-----</span><br><span class="line">&gt; db.users.update(&#123;<span class="string">'age'</span>:<span class="number">18</span>&#125;,&#123;<span class="string">'age'</span>:<span class="number">19</span>,<span class="string">"tag"</span>:[<span class="string">'mongo'</span>,<span class="string">'mysql'</span>,<span class="string">'nosql'</span>]&#125;)</span><br><span class="line">WriteResult(&#123; <span class="string">"nMatched"</span> : <span class="number">1</span>, <span class="string">"nUpserted"</span> : <span class="number">0</span>, <span class="string">"nModified"</span> : <span class="number">1</span> &#125;)</span><br><span class="line">&gt; db.users.find().pretty()</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"_id"</span> : ObjectId(<span class="string">"5a59ac4bc52de95ef9c85bfd"</span>),</span><br><span class="line"><span class="string">"age"</span> : <span class="number">19</span>,</span><br><span class="line"><span class="string">"tag"</span> : [</span><br><span class="line"><span class="string">"mongo"</span>,</span><br><span class="line"><span class="string">"mysql"</span>,</span><br><span class="line"><span class="string">"nosql"</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// $set修改字段;$inc新增字段</span></span><br><span class="line"><span class="comment">// $set 如果新增字段不会报错</span></span><br><span class="line"><span class="comment">// $inc 后面如果修改原有的字段会报错</span></span><br><span class="line">&gt;db.users.update(&#123;<span class="string">'age'</span>:<span class="number">20</span>&#125;,&#123;$set:&#123;<span class="string">'age'</span>:<span class="number">21</span>,<span class="string">"tag"</span>:[<span class="string">'mongo'</span>,<span class="string">'mysql'</span>,<span class="string">'nosql'</span>],<span class="string">'name'</span>:<span class="string">'ma11'</span>&#125;&#125;,&#123;multi:<span class="keyword">true</span>&#125;)</span><br><span class="line">&gt;db.users.update(&#123;<span class="string">'age'</span>:<span class="number">21</span>&#125;,&#123;$inc:&#123;<span class="string">'sex'</span>:<span class="number">1</span>&#125;&#125;,&#123;multi:<span class="keyword">true</span>&#125;)</span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// save()  经测试是存在则修改。不存在在添加</span></span><br><span class="line"><span class="comment">// 存在与否由是根据_id 来进行唯一区分的</span></span><br><span class="line">&gt; db.users.save(&#123;<span class="string">"age"</span>:<span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.2 + 新特性</span></span><br><span class="line">updateOne</span><br><span class="line">updateMany</span><br><span class="line">&gt; db.test_collection.updateOne(&#123;<span class="string">"name"</span>:<span class="string">"abc"</span>&#125;,&#123;$set:&#123;<span class="string">"age"</span>:<span class="string">"28"</span>&#125;&#125;)</span><br><span class="line">&gt; db.test_collection.updateMany(&#123;<span class="string">"age"</span>:&#123;$gt:<span class="string">"10"</span>&#125;&#125;,&#123;$set:&#123;<span class="string">"status"</span>:<span class="string">"xyz"</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><p>– 更多示例update参数作用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">只更新第一条记录：</span><br><span class="line">db.col.update( &#123; <span class="string">"count"</span> : &#123; $gt : <span class="number">1</span> &#125; &#125; , &#123; $set : &#123; <span class="string">"test2"</span> : <span class="string">"OK"</span>&#125; &#125; );</span><br><span class="line">全部更新：</span><br><span class="line">db.col.update( &#123; <span class="string">"count"</span> : &#123; $gt : <span class="number">3</span> &#125; &#125; , &#123; $set : &#123; <span class="string">"test2"</span> : <span class="string">"OK"</span>&#125; &#125;,<span class="keyword">false</span>,<span class="keyword">true</span> );</span><br><span class="line">只添加第一条：</span><br><span class="line">db.col.update( &#123; <span class="string">"count"</span> : &#123; $gt : <span class="number">4</span> &#125; &#125; , &#123; $set : &#123; <span class="string">"test5"</span> : <span class="string">"OK"</span>&#125; &#125;,<span class="keyword">true</span>,<span class="keyword">false</span> );</span><br><span class="line">全部添加加进去:</span><br><span class="line">db.col.update( &#123; <span class="string">"count"</span> : &#123; $gt : <span class="number">5</span> &#125; &#125; , &#123; $set : &#123; <span class="string">"test5"</span> : <span class="string">"OK"</span>&#125; &#125;,<span class="keyword">true</span>,<span class="keyword">true</span> );</span><br><span class="line">全部更新：</span><br><span class="line">db.col.update( &#123; <span class="string">"count"</span> : &#123; $gt : <span class="number">15</span> &#125; &#125; , &#123; $inc : &#123; <span class="string">"count"</span> : <span class="number">1</span>&#125; &#125;,<span class="keyword">false</span>,<span class="keyword">true</span> );</span><br><span class="line">只更新第一条记录：</span><br><span class="line">db.col.update( &#123; <span class="string">"count"</span> : &#123; $gt : <span class="number">10</span> &#125; &#125; , &#123; $inc : &#123; <span class="string">"count"</span> : <span class="number">1</span>&#125; &#125;,<span class="keyword">false</span>,<span class="keyword">false</span> );</span><br></pre></td></tr></table></figure><h2 id="删除文档"><a class="header-anchor" href="#删除文档"></a>删除文档</h2><p>MongoDB <code>remove()</code> 函数是用来移除集合中的数据。</p><ul><li>参数说明：<br>query :（可选）删除的文档的条件。<br>justOne : （可选）如果设为 true 或 1，则只删除一个文档。<br>writeConcern :（可选）抛出异常的级别。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的习惯是先查询是否存在,在进行remove操作</span></span><br><span class="line">db.user.remove(&#123;<span class="string">"name"</span>:<span class="number">3</span>&#125;)</span><br></pre></td></tr></table></figure><p>remove() 方法已经过时了，现在官方<strong>推荐使用</strong> <code>deleteOne() 和 deleteMany()</code> 方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">如删除集合下全部文档：</span><br><span class="line">db.inventory.deleteMany(&#123;&#125;)</span><br><span class="line">删除 status 等于 A 的全部文档：</span><br><span class="line">db.inventory.deleteMany(&#123; status : <span class="string">"A"</span> &#125;)</span><br><span class="line">删除 status 等于 D 的一个文档：</span><br><span class="line">db.inventory.deleteOne( &#123; status: <span class="string">"D"</span> &#125; )</span><br></pre></td></tr></table></figure><h2 id="条件操作符"><a class="header-anchor" href="#条件操作符"></a>条件操作符</h2><p>(&gt;) 大于 - <code>$gt</code>     ----------greater than<br>(&lt;) 小于 - <code>$lt</code>    ----------less than<br>(&gt;=) 大于等于 - <code>$gte</code>   ----------greater than equal<br>(&lt;= ) 小于等于 - <code>$lte</code>  ----------less than equal<br>(!=) 不等于  <code>$ne</code>     ----------- not equal<br>(=) 等于 <code>$eq</code>      --------  equal</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.user.find(&#123;&#125;,&#123;_id:<span class="number">0</span>&#125;).pretty()</span><br><span class="line">&#123; <span class="string">"names"</span> : <span class="number">2</span>, <span class="string">"name"</span> : <span class="number">34</span>, <span class="string">"named"</span> : <span class="number">34</span>, <span class="string">"namedd"</span> : <span class="number">34</span> &#125;</span><br><span class="line">&#123; <span class="string">"names"</span> : <span class="number">5</span>, <span class="string">"name"</span> : <span class="number">40</span>, <span class="string">"named"</span> : <span class="number">35</span>, <span class="string">"namedd"</span> : <span class="number">36</span> &#125;</span><br><span class="line">&#123; <span class="string">"names"</span> : <span class="number">7</span>, <span class="string">"name"</span> : <span class="number">45</span>, <span class="string">"named"</span> : <span class="number">37</span>, <span class="string">"namedd"</span> : <span class="number">38</span> &#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt; db.user.find(&#123;names:&#123;$gte:<span class="number">5</span>&#125;&#125;,&#123;_id:<span class="number">0</span>&#125;).pretty()</span><br><span class="line">&#123; <span class="string">"names"</span> : <span class="number">5</span>, <span class="string">"name"</span> : <span class="number">40</span>, <span class="string">"named"</span> : <span class="number">35</span>, <span class="string">"namedd"</span> : <span class="number">36</span> &#125;</span><br><span class="line">&#123; <span class="string">"names"</span> : <span class="number">7</span>, <span class="string">"name"</span> : <span class="number">45</span>, <span class="string">"named"</span> : <span class="number">37</span>, <span class="string">"namedd"</span> : <span class="number">38</span> &#125;</span><br><span class="line">&gt;</span><br><span class="line"><span class="comment">// name 字段&gt;1&amp; &lt;=5</span></span><br><span class="line">&gt; db.user.find(&#123;names:&#123;$lte:<span class="number">5</span>,$gt:<span class="number">1</span>&#125;&#125;,&#123;_id:<span class="number">0</span>&#125;).pretty()</span><br><span class="line">&#123; <span class="string">"names"</span> : <span class="number">2</span>, <span class="string">"name"</span> : <span class="number">34</span>, <span class="string">"named"</span> : <span class="number">34</span>, <span class="string">"namedd"</span> : <span class="number">34</span> &#125;</span><br><span class="line">&#123; <span class="string">"names"</span> : <span class="number">5</span>, <span class="string">"name"</span> : <span class="number">40</span>, <span class="string">"named"</span> : <span class="number">35</span>, <span class="string">"namedd"</span> : <span class="number">36</span> &#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt; db.user.find(&#123;names:&#123;$lte:<span class="number">5</span>,$gt:<span class="number">1</span>&#125;,named:<span class="number">34</span>&#125;,&#123;_id:<span class="number">0</span>&#125;).pretty()</span><br><span class="line">&#123; <span class="string">"names"</span> : <span class="number">2</span>, <span class="string">"name"</span> : <span class="number">34</span>, <span class="string">"named"</span> : <span class="number">34</span>, <span class="string">"namedd"</span> : <span class="number">34</span> &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h2 id="limit-与-skip-操作符"><a class="header-anchor" href="#limit-与-skip-操作符"></a>limit 与 skip 操作符</h2><p>我们除了可以使用<code>limit()方法来读取指定数量的数据外</code>，<br>还可以使用<code>skip()方法来跳过指定数量的数据</code>，skip方法同样接受一个数字参数作为跳过的记录条数。<br><code>当查询时同时使用sort,skip,limit，无论位置先后，最先执行顺序 sort再skip再limit。</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.user.find(&#123;&#125;,&#123;_id:<span class="number">0</span>&#125;).pretty()</span><br><span class="line">&#123; <span class="string">"names"</span> : <span class="number">2</span>, <span class="string">"name"</span> : <span class="number">34</span>, <span class="string">"named"</span> : <span class="number">34</span>, <span class="string">"namedd"</span> : <span class="number">34</span> &#125;</span><br><span class="line">&#123; <span class="string">"names"</span> : <span class="number">5</span>, <span class="string">"name"</span> : <span class="number">40</span>, <span class="string">"named"</span> : <span class="number">35</span>, <span class="string">"namedd"</span> : <span class="number">36</span> &#125;</span><br><span class="line">&#123; <span class="string">"names"</span> : <span class="number">7</span>, <span class="string">"name"</span> : <span class="number">45</span>, <span class="string">"named"</span> : <span class="number">37</span>, <span class="string">"namedd"</span> : <span class="number">38</span> &#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt; db.user.find(&#123;&#125;,&#123;_id:<span class="number">0</span>&#125;).limit(<span class="number">2</span>).pretty()</span><br><span class="line">&#123; <span class="string">"names"</span> : <span class="number">2</span>, <span class="string">"name"</span> : <span class="number">34</span>, <span class="string">"named"</span> : <span class="number">34</span>, <span class="string">"namedd"</span> : <span class="number">34</span> &#125;</span><br><span class="line">&#123; <span class="string">"names"</span> : <span class="number">5</span>, <span class="string">"name"</span> : <span class="number">40</span>, <span class="string">"named"</span> : <span class="number">35</span>, <span class="string">"namedd"</span> : <span class="number">36</span> &#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt; db.user.find(&#123;&#125;,&#123;_id:<span class="number">0</span>&#125;).skip(<span class="number">1</span>).limit(<span class="number">2</span>).pretty()</span><br><span class="line">&#123; <span class="string">"names"</span> : <span class="number">5</span>, <span class="string">"name"</span> : <span class="number">40</span>, <span class="string">"named"</span> : <span class="number">35</span>, <span class="string">"namedd"</span> : <span class="number">36</span> &#125;</span><br><span class="line">&#123; <span class="string">"names"</span> : <span class="number">7</span>, <span class="string">"name"</span> : <span class="number">45</span>, <span class="string">"named"</span> : <span class="number">37</span>, <span class="string">"namedd"</span> : <span class="number">38</span> &#125;</span><br><span class="line">&gt; db.user.find(&#123;&#125;,&#123;_id:<span class="number">0</span>&#125;).skip(<span class="number">2</span>).limit(<span class="number">2</span>).pretty()</span><br><span class="line">&#123; <span class="string">"names"</span> : <span class="number">7</span>, <span class="string">"name"</span> : <span class="number">45</span>, <span class="string">"named"</span> : <span class="number">37</span>, <span class="string">"namedd"</span> : <span class="number">38</span> &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h2 id="排序"><a class="header-anchor" href="#排序"></a>排序</h2><p>sort()方法可以通过参数指定排序的字段，<br>并使用 1 和 -1 来指定排序的方式，其中<code>1 为升序排列，而-1是用于降序排列</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.user.find(&#123;&#125;,&#123;_id:<span class="number">0</span>&#125;).pretty()</span><br><span class="line">&#123; <span class="string">"names"</span> : <span class="number">2</span>, <span class="string">"name"</span> : <span class="number">34</span>, <span class="string">"named"</span> : <span class="number">34</span>, <span class="string">"namedd"</span> : <span class="number">34</span> &#125;</span><br><span class="line">&#123; <span class="string">"names"</span> : <span class="number">5</span>, <span class="string">"name"</span> : <span class="number">40</span>, <span class="string">"named"</span> : <span class="number">35</span>, <span class="string">"namedd"</span> : <span class="number">36</span> &#125;</span><br><span class="line">&#123; <span class="string">"names"</span> : <span class="number">7</span>, <span class="string">"name"</span> : <span class="number">45</span>, <span class="string">"named"</span> : <span class="number">37</span>, <span class="string">"namedd"</span> : <span class="number">38</span> &#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt; db.user.find(&#123;&#125;,&#123;_id:<span class="number">0</span>&#125;).sort(&#123;name:<span class="number">-1</span>&#125;).pretty()</span><br><span class="line">&#123; <span class="string">"names"</span> : <span class="number">7</span>, <span class="string">"name"</span> : <span class="number">45</span>, <span class="string">"named"</span> : <span class="number">37</span>, <span class="string">"namedd"</span> : <span class="number">38</span> &#125;</span><br><span class="line">&#123; <span class="string">"names"</span> : <span class="number">5</span>, <span class="string">"name"</span> : <span class="number">40</span>, <span class="string">"named"</span> : <span class="number">35</span>, <span class="string">"namedd"</span> : <span class="number">36</span> &#125;</span><br><span class="line">&#123; <span class="string">"names"</span> : <span class="number">2</span>, <span class="string">"name"</span> : <span class="number">34</span>, <span class="string">"named"</span> : <span class="number">34</span>, <span class="string">"namedd"</span> : <span class="number">34</span> &#125;</span><br><span class="line">&gt; db.user.find(&#123;&#125;,&#123;_id:<span class="number">0</span>&#125;).sort(&#123;name:<span class="number">-1</span>,name:<span class="number">1</span>&#125;).pretty()</span><br><span class="line">&#123; <span class="string">"names"</span> : <span class="number">2</span>, <span class="string">"name"</span> : <span class="number">34</span>, <span class="string">"named"</span> : <span class="number">34</span>, <span class="string">"namedd"</span> : <span class="number">34</span> &#125;</span><br><span class="line">&#123; <span class="string">"names"</span> : <span class="number">5</span>, <span class="string">"name"</span> : <span class="number">40</span>, <span class="string">"named"</span> : <span class="number">35</span>, <span class="string">"namedd"</span> : <span class="number">36</span> &#125;</span><br><span class="line">&#123; <span class="string">"names"</span> : <span class="number">7</span>, <span class="string">"name"</span> : <span class="number">45</span>, <span class="string">"named"</span> : <span class="number">37</span>, <span class="string">"namedd"</span> : <span class="number">38</span> &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h2 id="索引"><a class="header-anchor" href="#索引"></a>索引</h2><ul><li><p>背景<br>索引通常能够极大的提高查询的效率，<strong>如果没有索引，<br>MongoDB在读取数据时必须扫描集合中的每个文件并选取那些符合查询条件的记录。<br>这种扫描全集合的查询效率是非常低的，特别在处理大量的数据时，查询可以要花费几十秒甚至几分钟，<br>这对网站的性能是非常致命的。</strong><br>索引是特殊的数据结构，索引存储在一个易于遍历读取的数据集合中，<code>索引是对数据库表中一列或多列的值进行排序的一种结构</code></p></li><li><p>语法<br><code>&gt;db.COLLECTION_NAME.ensureIndex({KEY:1})</code><br>语法中 Key 值为你要创建的索引字段，<strong>1为指定按升序创建索引，如果你想按降序来创建索引指定为-1即可。</strong><br>有几个可选参数设置后台执行,唯一索引等。详情看教程</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单个索引</span></span><br><span class="line"> &gt;db.col.ensureIndex(&#123;<span class="string">"title"</span>:<span class="number">1</span>&#125;)</span><br><span class="line"> &gt;</span><br><span class="line"> <span class="comment">// ensureIndex() 方法中你也可以设置使用多个字段创建索引（关系型数据库中称作复合索引）。</span></span><br><span class="line"> &gt;db.col.ensureIndex(&#123;<span class="string">"title"</span>:<span class="number">1</span>,<span class="string">"description"</span>:<span class="number">-1</span>&#125;)</span><br><span class="line"> &gt;</span><br><span class="line"> <span class="comment">// 在后台创建索引</span></span><br><span class="line"> db.values.ensureIndex(&#123;open: <span class="number">1</span>, close: <span class="number">1</span>&#125;, &#123;background: <span class="keyword">true</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="聚合"><a class="header-anchor" href="#聚合"></a>聚合</h2><ul><li><p>背景<br>MongoDB中<code>聚合(aggregate)主要用于处理数据(诸如统计平均值,求和等)</code>，<br>并返回计算后的数据结果。有点类似sql语句中的 count(*)。</p></li><li><p>语法<br><code>&gt;db.COLLECTION_NAME.aggregate(AGGREGATE_OPERATION)</code><br>常用的聚合表达式<br><code>$sum,$avg,$max,$min,$first,$last</code></p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.user.find(&#123;&#125;,&#123;_id:<span class="number">0</span>&#125;).pretty()</span><br><span class="line">&#123; <span class="string">"names"</span> : <span class="number">2</span>, <span class="string">"name"</span> : <span class="string">"martin1"</span>, <span class="string">"named"</span> : <span class="number">34</span>, <span class="string">"namedd"</span> : <span class="number">34</span> &#125;</span><br><span class="line">&#123; <span class="string">"names"</span> : <span class="number">5</span>, <span class="string">"name"</span> : <span class="string">"martin2"</span>, <span class="string">"named"</span> : <span class="number">35</span>, <span class="string">"namedd"</span> : <span class="number">36</span> &#125;</span><br><span class="line">&#123; <span class="string">"names"</span> : <span class="number">7</span>, <span class="string">"name"</span> : <span class="string">"martin1"</span>, <span class="string">"named"</span> : <span class="number">37</span>, <span class="string">"namedd"</span> : <span class="number">38</span> &#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt; db.user.aggregate([&#123;$group:&#123;_id:<span class="string">"$name"</span>, num_tutorial : &#123;$sum:<span class="number">1</span>&#125;&#125;&#125;])</span><br><span class="line">&#123; <span class="string">"_id"</span> : <span class="string">"martin2"</span>, <span class="string">"num_tutorial"</span> : <span class="number">1</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : <span class="string">"martin1"</span>, <span class="string">"num_tutorial"</span> : <span class="number">2</span> &#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt; db.user.aggregate([&#123;$group:&#123;_id:<span class="string">"$name"</span>, num_tutorial : &#123;$sum:<span class="string">"$names"</span>&#125;&#125;&#125;])</span><br><span class="line">&#123; <span class="string">"_id"</span> : <span class="string">"martin2"</span>, <span class="string">"num_tutorial"</span> : <span class="number">5</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : <span class="string">"martin1"</span>, <span class="string">"num_tutorial"</span> : <span class="number">9</span> &#125;</span><br><span class="line">&gt; db.user.aggregate([&#123;$group:&#123;_id:<span class="string">"$name"</span>, num_tutorial : &#123;$min:<span class="string">"$names"</span>&#125;&#125;&#125;])</span><br><span class="line">&#123; <span class="string">"_id"</span> : <span class="string">"martin2"</span>, <span class="string">"num_tutorial"</span> : <span class="number">5</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : <span class="string">"martin1"</span>, <span class="string">"num_tutorial"</span> : <span class="number">2</span> &#125;</span><br><span class="line">&gt; db.user.aggregate([&#123;$group:&#123;_id:<span class="string">"$name"</span>, num_tutorial : &#123;$min:<span class="string">"$named"</span>&#125;&#125;&#125;])</span><br><span class="line">&#123; <span class="string">"_id"</span> : <span class="string">"martin2"</span>, <span class="string">"num_tutorial"</span> : <span class="number">35</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : <span class="string">"martin1"</span>, <span class="string">"num_tutorial"</span> : <span class="number">34</span> &#125;</span><br></pre></td></tr></table></figure><ul><li>管道<br>管道在Unix和Linux中一般用于将当前命令的输出结果作为下一个命令的参数。<br>MongoDB的聚合管道将MongoDB文档在一个<code>管道处理完毕后将结果传递给下一个管道处理</code>。管道操作是可以重复的。<br>表达式：处理输入文档并输出。表达式是无状态的，只能用于计算当前聚合管道的文档，不能处理其它的文档。<br>这里我们介绍一下聚合框架中常用的几个操作：<br><strong>$project：修改输入文档的结构。可以用来重命名、增加或删除域，也可以用于创建计算结果以及嵌套文档。</strong><br><strong>$match：用于过滤数据，只输出符合条件的文档。$match使用MongoDB的标准查询操作。</strong><br><strong>$limit：用来限制MongoDB聚合管道返回的文档数。</strong><br><strong>$skip：在聚合管道中跳过指定数量的文档，并返回余下的文档。</strong><br><strong>$unwind：将文档中的某一个数组类型字段拆分成多条，每条包含数组中的一个值。</strong><br><strong>$group：将集合中的文档分组，可用于统计结果。</strong><br><strong>$sort：将输入文档排序后输出。</strong><br><strong>$geoNear：输出接近某一地理位置的有序文档。</strong></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.user.aggregate([&#123;$project:&#123;name:<span class="number">1</span>,named:<span class="number">1</span>&#125;&#125;])</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a59d48084421d11551bb6a0"</span>), <span class="string">"name"</span> : <span class="string">"martin1"</span>, <span class="string">"named"</span> : <span class="number">34</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a5c0f172a78de2cabb5ad27"</span>), <span class="string">"name"</span> : <span class="string">"martin2"</span>, <span class="string">"named"</span> : <span class="number">35</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a5c11e42a78de2cabb5ad28"</span>), <span class="string">"name"</span> : <span class="string">"martin1"</span>, <span class="string">"named"</span> : <span class="number">37</span> &#125;</span><br><span class="line">&gt; db.user.aggregate([&#123;$project:&#123;_id:<span class="number">0</span>&#125;&#125;])</span><br><span class="line">&#123; <span class="string">"names"</span> : <span class="number">2</span>, <span class="string">"name"</span> : <span class="string">"martin1"</span>, <span class="string">"named"</span> : <span class="number">34</span>, <span class="string">"namedd"</span> : <span class="number">34</span> &#125;</span><br><span class="line">&#123; <span class="string">"names"</span> : <span class="number">5</span>, <span class="string">"name"</span> : <span class="string">"martin2"</span>, <span class="string">"named"</span> : <span class="number">35</span>, <span class="string">"namedd"</span> : <span class="number">36</span> &#125;</span><br><span class="line">&#123; <span class="string">"names"</span> : <span class="number">7</span>, <span class="string">"name"</span> : <span class="string">"martin1"</span>, <span class="string">"named"</span> : <span class="number">37</span>, <span class="string">"namedd"</span> : <span class="number">38</span> &#125;</span><br><span class="line">&gt; db.user.aggregate([&#123;$match:&#123;named:&#123;$lte:<span class="number">37</span>,$gte:<span class="number">34</span>&#125;&#125;&#125;,&#123;$group:&#123;_id:<span class="string">"$name"</span>,num:&#123;$sum:<span class="number">1</span>&#125;&#125;&#125;])</span><br><span class="line">&#123; <span class="string">"_id"</span> : <span class="string">"martin2"</span>, <span class="string">"num"</span> : <span class="number">1</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : <span class="string">"martin1"</span>, <span class="string">"num"</span> : <span class="number">2</span> &#125;</span><br><span class="line"><span class="comment">// $match用于获取named大于34小于或等于37记录，然后将符合条件的记录送到下一阶段$group管道操作符进行处理。</span></span><br><span class="line">&gt; db.user.aggregate([&#123;$match:&#123;named:&#123;$lte:<span class="number">37</span>,$gte:<span class="number">34</span>&#125;&#125;&#125;,&#123;$group:&#123;_id:<span class="keyword">null</span>,num:&#123;$sum:<span class="number">1</span>&#125;&#125;&#125;])</span><br><span class="line">&#123; <span class="string">"_id"</span> : <span class="keyword">null</span>, <span class="string">"num"</span> : <span class="number">3</span> &#125;</span><br><span class="line"><span class="comment">// 跳过第一个,聚合操作</span></span><br><span class="line">&gt; db.user.aggregate([&#123;$skip:<span class="number">1</span>&#125;,&#123;$group:&#123;_id:<span class="string">"$name"</span>,num:&#123;$sum:<span class="number">1</span>&#125;&#125;&#125;])</span><br><span class="line">&#123; <span class="string">"_id"</span> : <span class="string">"martin1"</span>, <span class="string">"num"</span> : <span class="number">1</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : <span class="string">"martin2"</span>, <span class="string">"num"</span> : <span class="number">1</span> &#125;</span><br></pre></td></tr></table></figure><h2 id="mongodb使用参考"><a class="header-anchor" href="#mongodb使用参考"></a>mongodb使用参考</h2><p>可参考文章<a href="http://www.runoob.com/mongodb/mongodb-create-database.html" rel="external nofollow noopener noreferrer" target="_blank">mongodb使用教程</a></p><h2 id="引用"><a class="header-anchor" href="#引用"></a>引用</h2><blockquote><p>记录点滴，成为更好的自己。       — <a href="http://weizhuo.ma" rel="external nofollow noopener noreferrer" target="_blank">weizhuo.ma</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;创建-删除数据库&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#创建-删除数据库&quot;&gt;&lt;/a&gt;创建/删除数据库&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;创建&lt;/strong&gt;&lt;br&gt;
use DATABASE_NAME&lt;br&gt;
如果数据库不存
      
    
    </summary>
    
      <category term="程序语言" scheme="http://wiki.maweizhuo.com/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/"/>
    
      <category term="NOSQL" scheme="http://wiki.maweizhuo.com/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/NOSQL/"/>
    
    
      <category term="mongodb" scheme="http://wiki.maweizhuo.com/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>mongodb安装配置及启动</title>
    <link href="http://wiki.maweizhuo.com/posts/mongodb%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%90%AF%E5%8A%A8/"/>
    <id>http://wiki.maweizhuo.com/posts/mongodb安装配置及启动/</id>
    <published>2018-01-10T07:53:30.000Z</published>
    <updated>2018-01-11T08:50:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="linux-安装"><a class="header-anchor" href="#linux-安装"></a>linux 安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl -O https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.6.2.tgz   # 下载</span><br><span class="line">tar -zxvf mongodb-linux-x86_64-3.6.2.tgz                             # 解压</span><br><span class="line"></span><br><span class="line">mv  mongodb-linux-x86_64-3.6.2/ /usr/local/mongodb                 # 将解压包拷贝到指定目录</span><br><span class="line"></span><br><span class="line">export PATH= /usr/local/mongodb/bin:$PATH</span><br></pre></td></tr></table></figure><h2 id="配置"><a class="header-anchor" href="#配置"></a>配置</h2><p>yum 安装的配置文件在/etc/mongodb.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">修改为如下:</span><br><span class="line">dbpath=/data/mongo/</span><br><span class="line"></span><br><span class="line">logpath=/data/mongo/mongo.log</span><br><span class="line"></span><br><span class="line">logappend=true</span><br><span class="line"></span><br><span class="line">fork=true</span><br><span class="line"></span><br><span class="line">port=27017</span><br><span class="line"></span><br><span class="line">非yum 安装的可以指定位置写入配置文件,启动时候指向该文件即可</span><br></pre></td></tr></table></figure><h2 id="启动"><a class="header-anchor" href="#启动"></a>启动</h2><ol><li>配置文件方式启动</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># bin/mongod -f /data/mongo/mongodb.cnf</span><br><span class="line"></span><br><span class="line">或者 # bin/mongod -f /data/mongo/mongodb.cnf &amp; （放到后台执行）</span><br></pre></td></tr></table></figure><ol start="2"><li>参数启动mongo</li></ol>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> bin/mongod -dbpath /data/mongo/ -logpath /data/mongo/mongo.log -logappend -fork -port 27017</span><br><span class="line">  </span><br><span class="line">终端输出：</span><br><span class="line">  </span><br><span class="line">  all output going to: /data/mongo/mongo.log</span><br></pre></td></tr></table></figure><h2 id="php安装扩展"><a class="header-anchor" href="#php安装扩展"></a>PHP安装扩展</h2><ul><li>php5 版本</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/mongodb/mongo-php-driver.git</span><br><span class="line">cd mongo-php-driver </span><br><span class="line">git submodule sync &amp;&amp; git submodule update --init</span><br><span class="line"> /usr/local/php/bin/phpize</span><br><span class="line"> ./configure --with-php-config=/usr/local/php/bin/php-config</span><br><span class="line"> make </span><br><span class="line"> sudo make install</span><br></pre></td></tr></table></figure><ul><li>php7 版本<br><code>/usr/local/php7/bin/pecl install mongodb</code></li></ul><p>然后修改php.ini<br><code>extension=mongo.so</code><br>重启php-fpm或Apache</p><h2 id="登录"><a class="header-anchor" href="#登录"></a>登录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># mongo</span><br><span class="line">MongoDB shell version: 2.4.14</span><br><span class="line">connecting to: test</span><br></pre></td></tr></table></figure><h2 id="mongodb与mysql对比"><a class="header-anchor" href="#mongodb与mysql对比"></a>mongodb与mysql对比</h2><p>可参考文章<a href="https://ruby-china.org/topics/27659" rel="external nofollow noopener noreferrer" target="_blank">mongodb与mysql深入对比</a></p><h2 id="引用"><a class="header-anchor" href="#引用"></a>引用</h2><blockquote><p>记录点滴，成为更好的自己。       — <a href="http://weizhuo.ma" rel="external nofollow noopener noreferrer" target="_blank">weizhuo.ma</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;linux-安装&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#linux-安装&quot;&gt;&lt;/a&gt;linux 安装&lt;/h2&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
      
    
    </summary>
    
      <category term="程序语言" scheme="http://wiki.maweizhuo.com/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/"/>
    
      <category term="NOSQL" scheme="http://wiki.maweizhuo.com/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/NOSQL/"/>
    
    
      <category term="nosql" scheme="http://wiki.maweizhuo.com/tags/nosql/"/>
    
      <category term="mongodb" scheme="http://wiki.maweizhuo.com/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>Nosql与Sql对比</title>
    <link href="http://wiki.maweizhuo.com/posts/Nosql%E4%B8%8ESql%E5%AF%B9%E6%AF%94/"/>
    <id>http://wiki.maweizhuo.com/posts/Nosql与Sql对比/</id>
    <published>2018-01-10T04:53:30.000Z</published>
    <updated>2018-01-10T09:39:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关系型数据库发展史"><a class="header-anchor" href="#关系型数据库发展史"></a>关系型数据库发展史</h2><p>在现代的计算系统上每天网络上都会产生庞大的数据量。<br>这些数据有很大一部分是由<strong>关系数据库管理系统</strong>（<code>RDMBS</code>）来处理。<br>1970年 E.F.Codd’s提出的关系模型的论文 “A relational model of data for large shared data banks”，<br>这使得数据建模和应用程序编程更加简单。<br>通过应用实践证明，关系模型是非常适合于客户服务器编程，远远超出预期的利益，<br>今天它是结构化数据存储在网络和商务应用的主导技术。</p><h2 id="关系型数据库遵循acid规则"><a class="header-anchor" href="#关系型数据库遵循acid规则"></a>关系型数据库遵循ACID规则</h2><p>事务在英文中是transaction，和现实世界中的交易很类似，它有如下四个特性：<br><strong>1、A (Atomicity) 原子性</strong><br><strong>2、C (Consistency) 一致性</strong><br><strong>3、I (Isolation) 独立性</strong><br><strong>4、D (Durability) 持久性</strong></p><h2 id="什么是nosql"><a class="header-anchor" href="#什么是nosql"></a>什么是NoSQL?</h2><p>NoSQL，指的是<code>非关系型的数据库</code>。NoSQL有时也称作Not Only SQL的缩写，是对不同于传统的关系型数据库的<br>数据库管理系统的统称。<br>NoSQL用于超大规模数据的存储。（例如谷歌或Facebook每天为他们的用户收集万亿比特的数据）。<br>这些类型的数据存储不需要固定的模式，无需多余操作就可以横向扩展。</p><h2 id="为什么使用nosql"><a class="header-anchor" href="#为什么使用nosql"></a>为什么使用NoSQL ?</h2><p>今天我们可以通过第三方平台（如：Google,Facebook等）可以很容易的访问和抓取数据。<br>用户的个人信息，社交网络，地理位置，用户生成的数据和用户操作日志已经成倍的增加。<br>我们如果要对这些用户数据进行挖掘，那SQL数据库已经不适合这些应用了, NoSQL数据库的发展也却能很好的处理这些大的数据。<br><img src="http://www.runoob.com/wp-content/uploads/2013/10/web-data-image.png" alt="网站数据趋势"></p><h2 id="rdbms-vs-nosql"><a class="header-anchor" href="#rdbms-vs-nosql"></a>RDBMS vs NoSQL</h2><table><thead><tr><th style="text-align:center">RDBMS</th><th style="text-align:center">NoSQL</th></tr></thead><tbody><tr><td style="text-align:center">高度组织化结构化数据</td><td style="text-align:center">代表着不仅仅是SQL</td></tr><tr><td style="text-align:center">结构化查询语言（SQL） (SQL)</td><td style="text-align:center">没有声明性查询语言</td></tr><tr><td style="text-align:center">数据和关系都存储在单独的表中。</td><td style="text-align:center">没有预定义的模式</td></tr><tr><td style="text-align:center">数据操纵语言，数据定义语言</td><td style="text-align:center">键 - 值对存储，列存储，文档存储，图形数据库</td></tr><tr><td style="text-align:center">严格的一致性</td><td style="text-align:center">最终一致性，而非ACID属性</td></tr><tr><td style="text-align:center">基础事务</td><td style="text-align:center">CAP定理</td></tr><tr><td style="text-align:center">高性能，高可用性和可伸缩性</td><td style="text-align:center"></td></tr></tbody></table><p><img src="http://www.runoob.com/wp-content/uploads/2013/10/bigdata.png" alt="数据发展形势"></p><h2 id="nosql-简史"><a class="header-anchor" href="#nosql-简史"></a>NoSQL 简史</h2><p>NoSQL一词最早出现于1998年，是Carlo Strozzi开发的一个轻量、开源、不提供SQL功能的关系数据库。<br>2009年，Last.fm的Johan Oskarsson发起了一次关于分布式开源数据库的讨论，<br>来自Rackspace的Eric Evans再次提出了NoSQL的概念，这时的<strong>NoSQL主要指非关系型、分布式、不提供ACID的数据库设计模式</strong>。<br>2009年在亚特兰大举行的&quot;no:sql(east)“讨论会是一个里程碑，其口号是<br>&quot;select fun, profit from real_world where relational=false;”。<br>因此，对NoSQL最普遍的解释是<code>&quot;非关联型的&quot;，强调Key-Value Stores和文档数据库的优点，而不是单纯的反对RDBMS</code>。</p><h2 id="cap定理-cap-theorem"><a class="header-anchor" href="#cap定理-cap-theorem"></a>CAP定理（CAP theorem）</h2><p>在计算机科学中, <code>CAP定理（CAP theorem）, 又被称作 布鲁尔定理（Brewer's theorem）</code>,<br>它指出对于一个分布式计算系统来说，不可能同时满足以下三点:<br>一致性(Consistency) (所有节点在同一时间具有相同的数据)<br>可用性(Availability) (保证每个请求不管成功或者失败都有响应)<br>分隔容忍(Partition tolerance) (系统中任意信息的丢失或失败不会影响系统的继续运作)<br><code>CAP理论的核心是：一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求，最多只能同时较好的满足两个</code>。<br>因此，根据 CAP 原理将 NoSQL 数据库分成了满足 CA 原则、满足 CP 原则和满足 AP 原则三 大类：<br>CA - 单点集群，满足一致性，可用性的系统，通常在可扩展性上不太强大。<br>CP - 满足一致性，分区容忍性的系统，通常性能不是特别高。<br>AP - 满足可用性，分区容忍性的系统，通常可能对一致性要求低一些<br><img src="http://www.runoob.com/wp-content/uploads/2013/10/cap-theoram-image.png" alt="AP定理"></p><h2 id="nosql的优点-缺点"><a class="header-anchor" href="#nosql的优点-缺点"></a>NoSQL的优点/缺点</h2><table><thead><tr><th style="text-align:center">优点</th><th style="text-align:center">缺点</th></tr></thead><tbody><tr><td style="text-align:center">高可扩展性</td><td style="text-align:center">没有标准化</td></tr><tr><td style="text-align:center">分布式计算</td><td style="text-align:center">有限的查询功能（到目前为止）</td></tr><tr><td style="text-align:center">低成本</td><td style="text-align:center">最终一致是不直观的程序</td></tr><tr><td style="text-align:center">架构的灵活性，半结构化数据</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">没有复杂的关系</td><td style="text-align:center"></td></tr></tbody></table><h2 id="base"><a class="header-anchor" href="#base"></a>BASE</h2><p>BASE：Basically Available, Soft-state, Eventually Consistent。 由 Eric Brewer 定义。<br><code>BASE是NoSQL数据库通常对可用性及一致性的弱要求原则:</code><br>Basically Availble --基本可用<br>Soft-state --软状态/柔性事务。 “Soft state” 可以理解为&quot;无连接&quot;的, 而 “Hard state” 是&quot;面向连接&quot;的<br>Eventual Consistency --最终一致性 最终一致性， 也是是 ACID 的最终目的。</p><h2 id="acid-vs-base"><a class="header-anchor" href="#acid-vs-base"></a>ACID vs BASE</h2><table><thead><tr><th style="text-align:center">ACID</th><th style="text-align:center">BASE</th></tr></thead><tbody><tr><td style="text-align:center">原子性(Atomicity)</td><td style="text-align:center">基本可用(Basically Available)</td></tr><tr><td style="text-align:center">一致性(Consistency)</td><td style="text-align:center">软状态/柔性事务(Soft state)</td></tr><tr><td style="text-align:center">隔离性(Isolation)</td><td style="text-align:center">最终一致性 (Eventual consistency)</td></tr><tr><td style="text-align:center">持久性 (Durable)</td><td style="text-align:center"></td></tr></tbody></table><h2 id="nosql-数据库分类"><a class="header-anchor" href="#nosql-数据库分类"></a>NoSQL 数据库分类</h2><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">部分代表</th><th style="text-align:center">特点</th></tr></thead><tbody><tr><td style="text-align:center">列存储</td><td style="text-align:center">Hbase;Cassandra;Hypertable</td><td style="text-align:center">顾名思义，是按列存储数据的。最大的特点是方便存储结构化和半结构化数据，方便做数据压缩，对针对某一列或者某几列的查询有非常大的IO优势。</td></tr><tr><td style="text-align:center">文档存储</td><td style="text-align:center"><code>MongoDB</code>;CouchDB</td><td style="text-align:center">文档存储一般用类似<code>json的格式存储</code>，存储的内容是<code>文档型</code>的。这样也就有有机会对某些字段建立索引，实现关系数据库的某些功能。</td></tr><tr><td style="text-align:center">key-value存储</td><td style="text-align:center">Tokyo Cabinet / Tyrant;Berkeley DB;<code>MemcacheDB;Redis</code></td><td style="text-align:center">可以通过key快速查询到其value。一般来说，存储不管value的格式，照单全收。（<strong>Redis包含了其他功能</strong>）</td></tr><tr><td style="text-align:center">图存储</td><td style="text-align:center">Neo4J,FlockDB</td><td style="text-align:center">图形关系的最佳存储。使用传统关系数据库来解决的话性能低下，而且设计使用不方便。</td></tr><tr><td style="text-align:center">对象存储</td><td style="text-align:center">db4o,Versant</td><td style="text-align:center">通过类似面向对象语言的语法操作数据库，通过对象的方式存取数据。</td></tr><tr><td style="text-align:center">xml数据库</td><td style="text-align:center">Berkeley DB XML;BaseX</td><td style="text-align:center">高效的存储XML数据，并支持XML的内部查询语法，比如XQuery,Xpath。</td></tr></tbody></table><h2 id="引用"><a class="header-anchor" href="#引用"></a>引用</h2><blockquote><p>记录点滴，成为更好的自己。       — <a href="http://weizhuo.ma" rel="external nofollow noopener noreferrer" target="_blank">weizhuo.ma</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;关系型数据库发展史&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#关系型数据库发展史&quot;&gt;&lt;/a&gt;关系型数据库发展史&lt;/h2&gt;
&lt;p&gt;在现代的计算系统上每天网络上都会产生庞大的数据量。&lt;br&gt;
这些数据有很大一部分是由&lt;strong&gt;关系数据库管
      
    
    </summary>
    
      <category term="程序语言" scheme="http://wiki.maweizhuo.com/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/"/>
    
      <category term="NOSQL" scheme="http://wiki.maweizhuo.com/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/NOSQL/"/>
    
    
      <category term="nosql" scheme="http://wiki.maweizhuo.com/tags/nosql/"/>
    
  </entry>
  
  <entry>
    <title>B树概念</title>
    <link href="http://wiki.maweizhuo.com/posts/B%E6%A0%91%E6%A6%82%E5%BF%B5/"/>
    <id>http://wiki.maweizhuo.com/posts/B树概念/</id>
    <published>2018-01-09T08:53:30.000Z</published>
    <updated>2018-01-09T10:04:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a class="header-anchor" href="#背景"></a>背景</h2><p><code>mysql</code> 使用的再多不过了,数据库索引内部实现的多数用的是B+树,但我对这个树的概念<br>及背后的算法,可以说是一点不了解,主要了解其定义,及算法实现。网上查了下记录如下。</p><h2 id="参考文章"><a class="header-anchor" href="#参考文章"></a>参考文章</h2><blockquote><ul><li><a href="http://www.cnblogs.com/tgycoder/p/5077017.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.cnblogs.com/tgycoder/p/5077017.html</a></li></ul></blockquote><h2 id="分类"><a class="header-anchor" href="#分类"></a>分类</h2><ul><li>B树(B-树)</li><li>B+树</li><li>B*树</li></ul><h2 id="前言"><a class="header-anchor" href="#前言"></a>前言</h2><p>动态查找树主要有：<strong>二叉查找树（Binary Search Tree），平衡二叉查找树（Balanced Binary Search Tree），<br>红黑树(Red-Black Tree )</strong>，B-tree/B±tree/ B*-tree (B~Tree)。前三者是典型的<code>二叉查找树结构</code>，<br>其查找的时间复杂度O(log2N)与树的深度相关，那么降低树的深度自然会提高查找效率。</p><p>但是咱们有面对这样一个实际问题：就是大规模数据存储中，实现索引查询这样一个实际背景下，<br>树节点存储的元素数量是有限的（如果元素数量非常多的话，查找就退化成节点内部的线性查找了），<br>这样导致二叉查找树结构由于树的深度过大而造成磁盘I/O读写过于频繁，<br>进而导致查询效率低下（为什么会出现这种情况，待会在外部存储器-磁盘中有所解释），<br>那么如何减少树的深度（当然是不能减少查询的数据量），一个基本的想法就是：采用<strong>多叉树结构</strong><br>（由于树节点元素数量是有限的，自然该节点的子树数量也就是有限的）。</p><p>也就是说，因为磁盘的操作费时费资源，如果过于频繁的多次查找势必效率低下。<br>那么如何提高效率，即如何避免磁盘过于频繁的多次查找呢？根据磁盘查找存取的次数往往由树的高度所决定，所以，<br>只要我们通过某种较好的树结构减少树的结构尽量减少树的高度，那么是不是便能有效减少磁盘查找存取的次数呢？<br>那这种有效的树结构是一种怎样的树呢？</p><p>这样我们就提出了一个新的查找树结构——<strong>多路查找树</strong>。根据平衡二叉树的启发，自然就想到平衡多路查找树结构，<br>也就是这篇文章所要阐述的第一个主题B~tree，即B树结构(后面，我们将看到，<strong>B树的各种操作能使B树保持较低的高度，<br>从而达到有效避免磁盘过于频繁的查找存取操作，从而有效提高查找效率</strong>)。</p><h2 id="b树定义"><a class="header-anchor" href="#b树定义"></a>B树定义</h2><p><code>B树是为了磁盘或其它存储设备而设计的一种多叉平衡查找树</code>，与红黑树很相似。但是也存在一些不同。<br><strong>B树与红黑树最大的不同在于，B树的结点可以有多个子女，从几个到上千个。</strong><br>那为什么又说B树与红黑树很相似呢?因为与红黑树一样，一棵含n个结点的B树的高度也为O（lgn）<br>，但可能比一棵红黑树的高度小许多，因为它的分支因子比较大。所以，B树可以在O（logn）时间内，<br>实现各种如插入（insert），删除（delete）等动态集合操作。<br>(我的简单理解就是树的单层节点多了,更容易操作)</p><p>如下图所示，即是一棵B树，一棵关键字为英语中辅音字母的B树，现在要从树种查找字母R<br>（包含n[x]个关键字的内结点x，x有n[x]+1]个子女（也就是说，一个内结点x若含有n[x]个关键字，<br>那么x将含有n[x]+1个子女）。所有的叶结点都处于相同的深度，带阴影的结点为查找字母R时要检查的结点）：<br><img src="http://hi.csdn.net/attachment/201106/7/8394323_130745821166Sc.jpg" alt="B树简易示意图"></p><h2 id="b树节点定义"><a class="header-anchor" href="#b树节点定义"></a>B树节点定义</h2><p><a href="https://images2015.cnblogs.com/blog/702782/201512/702782-20151226202710265-1268539318.png" rel="external nofollow noopener noreferrer" target="_blank">B树节点图</a></p><h2 id="b-树"><a class="header-anchor" href="#b-树"></a>B+树</h2><p>B+树是应文件系统所需而产生的一种B-tree的变形树</p><ul><li><p><code>一棵m阶的B+树和m阶的B树的异同点在于：</code><br>有n棵子树的结点中含有n-1 个关键字；<br>(此处颇有争议，B+树到底是与B 树n棵子树有n-1个关键字 保持一致，还是不一致：B树n棵子树的结点中含有n个关键字，<br>待后续查证。暂先提供两个参考链接：①wikipedia <a href="http://en.wikipedia.org/wiki/B%2B_tree#Overview%EF%BC%9B" rel="external nofollow noopener noreferrer" target="_blank">http://en.wikipedia.org/wiki/B%2B_tree#Overview；</a><br>②http://hedengcheng.com/?p=525。而下面B+树的图尚未最终确定是否有问题，请读者注意)<br><strong>所有的叶子结点中包含了全部关键字的信息，及指向含有这些关键字记录的指针，<br>且叶子结点本身依关键字的大小自小而大的顺序链接。</strong> (而B 树的叶子节点并没有包括全部需要查找的信息)<br>所有的非终端结点可以看成是索引部分，结点中仅含有其子树根结点中最大（或最小）关键字。<br>(而B 树的非终节点也包含需要查找的有效信息)<br><a href="http://images2015.cnblogs.com/blog/702782/201512/702782-20151226211137874-1462155614.png" rel="external nofollow noopener noreferrer" target="_blank">B+树</a></p></li><li><p><code>为什么说B+-tree比B 树更适合实际应用中操作系统的文件索引和数据库索引？</code><br>1）<strong>B+树的磁盘读写代价更低</strong></p></li></ul><p>B+树的内部结点并没有指向关键字具体信息的指针。因此其内部结点相对于B树更小。如果把所有同一内部结点的关键字存放在<br>同一盘块中，那么盘块所能容纳的关键字数量也越多。一次性读入内存中的需要查找的关键字也就越多。<br>相对来说IO读写次数也就降低了。</p><p>举个例子，假设磁盘中的一个盘块容纳16bytes，而一个关键字2bytes，一个关键字具体信息指针2bytes。<br>一棵9阶B-tree(一个结点最多8个关键字)的内部结点需要2个盘快。而B+ 树内部结点只需要1个盘快。<br>当需要把内部结点读入内存中的时候，B 树就比B+ 树多一次盘块查找时间(在磁盘中就是盘片旋转的时间)。</p><ol start="2"><li><strong>B±tree的查询效率更加稳定</strong></li></ol><p>由于非终结点并不是最终指向文件内容的结点，而只是叶子结点中关键字的索引。<br>所以任何关键字的查找必须走一条从根结点到叶子结点的路。所有关键字查询的路径长度相同，导致每一个数据的查询效率相当。</p><p>个人觉得这两个原因都不是主要原因。数据库索引采用B+树的主要原因是<br><code>B树在提高了磁盘IO性能的同时并没有解决元素遍历的效率低下的问题。 正是为了解决这个问题，B+树应运而生。B+树只要遍历叶子节点就可以实现整棵树的遍历。 而且在数据库中基于范围的查询是非常频繁的，而B树不支持这样的操作（或者说效率太低）。</code></p><h2 id="b-tree"><a class="header-anchor" href="#b-tree"></a>B*-tree</h2><p>B*-tree是<code>B+-tree</code>的变体，在B+树的基础上(<strong>所有的叶子结点中包含了全部关键字的信息，及指向含有这些关键字记录的指针</strong>)，<br>B<em>树中非根和非叶子结点再增加指向兄弟的指针；B</em>树定义了非叶子结点关键字个数至少为(2/3)*M，<br>即块的最低使用率为2/3（代替B+树的1/2）。给出了一个简单实例，如下图所示：<br><a href="http://images2015.cnblogs.com/blog/702782/201512/702782-20151226212009546-362618629.png" rel="external nofollow noopener noreferrer" target="_blank">B*-tree</a></p><h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2><p>通过以上介绍，大致将B树，B+树，B*树总结如下：</p><p><code>B树：有序数组+平衡多叉树；</code></p><p><code>B+树：有序数组链表+平衡多叉树；</code></p><p><code>B*树：一棵丰满的B+树。</code></p><p><strong>B+树还有一个最大的好处，方便扫库，B树必须用中序遍历的方法按序扫库，<br>而B+树直接从叶子结点挨个扫一遍就完了，B+树支持range-query非常方便，而B树不支持。<br>这是数据库选用B+树的最主要原因。</strong></p><p><code>mysql 底层存储是用B+树实现的</code>，知道为什么么。内存中B+树是没有优势的，但是一到磁盘，B+树的威力就出来了</p><h2 id="引用"><a class="header-anchor" href="#引用"></a>引用</h2><blockquote><p>记录点滴，成为更好的自己。       — <a href="http://weizhuo.ma" rel="external nofollow noopener noreferrer" target="_blank">weizhuo.ma</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;mysql&lt;/code&gt; 使用的再多不过了,数据库索引内部实现的多数用的是B+树,但我对这个树的概念&lt;br&gt;
及背后的算法,可以说是一点不了解
      
    
    </summary>
    
      <category term="程序语言" scheme="http://wiki.maweizhuo.com/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/"/>
    
      <category term="MYSQL" scheme="http://wiki.maweizhuo.com/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/MYSQL/"/>
    
    
      <category term="mysql" scheme="http://wiki.maweizhuo.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>大型网站架构演化</title>
    <link href="http://wiki.maweizhuo.com/posts/%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E6%9E%B6%E6%9E%84%E6%BC%94%E5%8C%96/"/>
    <id>http://wiki.maweizhuo.com/posts/大型网站架构演化/</id>
    <published>2018-01-08T01:51:30.000Z</published>
    <updated>2018-01-08T03:37:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="特点"><a class="header-anchor" href="#特点"></a>特点</h2><ul><li>高并发</li><li>大流量</li><li>高可用</li><li>海量数据</li><li>…</li></ul><h2 id="初始阶段"><a class="header-anchor" href="#初始阶段"></a>初始阶段</h2><p>一台服务器搞定一个网站<br><img src="https://box.kancloud.cn/2016-06-23_576bad2249444.jpg" alt="初始阶段架构图"></p><h2 id="应用服务和数据服务分离"><a class="header-anchor" href="#应用服务和数据服务分离"></a>应用服务和数据服务分离</h2><p><img src="https://box.kancloud.cn/2016-06-23_576bad227bba9.jpg" alt="应用和数据服务分类图"></p><h2 id="使用缓存"><a class="header-anchor" href="#使用缓存"></a>使用缓存</h2><p>现在的网站基本上都会使用缓存，即：<code>80%的业务访问都会集中在20%的数据上</code>。<br><img src="https://box.kancloud.cn/2016-06-23_576bad2291691.jpg" alt="缓存改善性能图"></p><h2 id="服务器集群及读写分离"><a class="header-anchor" href="#服务器集群及读写分离"></a>服务器集群及读写分离</h2><ul><li>因为单一应用服务器能够处理的请求连接有限，在网站访问高峰时期，应用服务器会成为整个网站的瓶颈。<br>因此使用负载均衡处理器势在必然。通过<code>负载均衡调度</code>服务器，<br>可将来自浏览器的访问请求分发到应用的集群中的任何一台服务器上。</li><li>当用户达到一定规模后，<code>数据库因为负载压力过高而成为网站的瓶颈</code>。<br>而目前主流的数据库都提供主从热备功能，通过配置两台数据库主从关系，<br>可以将一台数据库的数据更新同步到另一台服务器上。<br>网站利用数据库这一功能实现数据库读写分离，从而改善数据库负载压力。<br><img src="https://box.kancloud.cn/2016-06-23_576bad22c5fa2.jpg" alt="读写分离图"></li></ul><h2 id="使用反向代理和cdn加速网站相应"><a class="header-anchor" href="#使用反向代理和cdn加速网站相应"></a>使用反向代理和CDN加速网站相应</h2><p>提高网站的访问速度，主要手段有使用<code>CDN和反向代理</code>。<br><strong>CDN和反向代理的基本原理都是缓存</strong>，区别在于CDN部署在网络提供商的机房，<br>而反向代理是部署在网站的中心机房，当用户请求到达中心机房后，首先访问的反向代理，<br>如果反向代理缓存着用户请求的资源，则直接返回给用户。<br><img src="https://box.kancloud.cn/2016-06-23_576bad22e617c.jpg" alt="反向代理CDN图"></p><h2 id="分布式文件系统和数据库系统"><a class="header-anchor" href="#分布式文件系统和数据库系统"></a>分布式文件系统和数据库系统</h2><p>任何强大的单一服务器都满足不了大型网站持续增长的业务需求。</p><p><strong>分布式数据库时网站数据库拆分的最后手段，只用在单表数据规模非常大的时候才使用。<br>不到不得已时，网站更常用的数据库拆分手段是业务拆分，将不同业务的数据部署在不同的物理服务器上。</strong></p><h2 id="使用nosql和搜索引擎"><a class="header-anchor" href="#使用nosql和搜索引擎"></a>使用NoSQL和搜索引擎</h2><p><img src="https://box.kancloud.cn/2016-06-23_576bad5f83743.jpg" alt="NOSQL图"></p><h2 id="业务拆分"><a class="header-anchor" href="#业务拆分"></a>业务拆分</h2><p>大型网站为了应对日益复杂的业务场景，通过使用分而治之的手段将真个网站业务拆分成不同的产品线。</p><p><strong>具体到技术上，也会根据产品线话费，将一个网站拆分成许多不同的应用，每个应用独立部署维护。<br>应用之间可以通过超链接建立管理，也可以通过消息队列进行数据分发，<br>当然最多的还是通过访问同一个数据存储系统来构成一个关联的完整系统。</strong><br><img src="https://box.kancloud.cn/2016-06-23_576bad5f9a2e2.jpg" alt="业务拆分图"></p><h2 id="分布式服务"><a class="header-anchor" href="#分布式服务"></a>分布式服务</h2><p>由于每一个应用系统都需要执行许多相同的业务操作，<br>比如用户管理，session管理，那么可以将这些公用的业务提取出来，独立部署。<br><img src="https://box.kancloud.cn/2016-06-23_576bad5fb1a96.jpg" alt="分布式服务图"></p><h2 id="参考文章"><a class="header-anchor" href="#参考文章"></a>参考文章</h2><blockquote><ul><li><a href="https://www.kancloud.cn/digest/big-site-design/169670" rel="external nofollow noopener noreferrer" target="_blank">大型网站技术架构</a></li></ul></blockquote><h2 id="引用"><a class="header-anchor" href="#引用"></a>引用</h2><blockquote><p>记录点滴，成为更好的自己。       — <a href="http://weizhuo.ma" rel="external nofollow noopener noreferrer" target="_blank">weizhuo.ma</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;特点&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#特点&quot;&gt;&lt;/a&gt;特点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;高并发&lt;/li&gt;
&lt;li&gt;大流量&lt;/li&gt;
&lt;li&gt;高可用&lt;/li&gt;
&lt;li&gt;海量数据&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 i
      
    
    </summary>
    
      <category term="编程艺术" scheme="http://wiki.maweizhuo.com/categories/%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF/"/>
    
      <category term="架构" scheme="http://wiki.maweizhuo.com/categories/%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="架构" scheme="http://wiki.maweizhuo.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>HTTP 状态码</title>
    <link href="http://wiki.maweizhuo.com/posts/HTTP%20%E7%8A%B6%E6%80%81%E7%A0%81/"/>
    <id>http://wiki.maweizhuo.com/posts/HTTP 状态码/</id>
    <published>2018-01-08T01:51:30.000Z</published>
    <updated>2018-01-08T02:54:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一张图看懂http状态码"><a class="header-anchor" href="#一张图看懂http状态码"></a>一张图看懂HTTP状态码</h2><p><img src="https://box.kancloud.cn/2015-11-03_5638652bd8ad9.jpg" alt="http状态码"></p><h2 id="引用"><a class="header-anchor" href="#引用"></a>引用</h2><blockquote><p>记录点滴，成为更好的自己。       — <a href="http://weizhuo.ma" rel="external nofollow noopener noreferrer" target="_blank">weizhuo.ma</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一张图看懂http状态码&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#一张图看懂http状态码&quot;&gt;&lt;/a&gt;一张图看懂HTTP状态码&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://box.kancloud.cn/2015-11-03_56
      
    
    </summary>
    
      <category term="编程艺术" scheme="http://wiki.maweizhuo.com/categories/%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF/"/>
    
      <category term="HTTP" scheme="http://wiki.maweizhuo.com/categories/%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF/HTTP/"/>
    
    
      <category term="Http" scheme="http://wiki.maweizhuo.com/tags/Http/"/>
    
  </entry>
  
  <entry>
    <title>composer相关</title>
    <link href="http://wiki.maweizhuo.com/posts/composer%E7%9B%B8%E5%85%B3/"/>
    <id>http://wiki.maweizhuo.com/posts/composer相关/</id>
    <published>2018-01-03T07:53:30.000Z</published>
    <updated>2018-01-03T09:26:51.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a class="header-anchor" href="#背景"></a>背景</h2><p><code>composer</code> 在laravel 框架 使用中的汇总,包括安装及引入包</p><h2 id="是什么"><a class="header-anchor" href="#是什么"></a>是什么</h2><p>是 PHP 用来管理依赖（dependency）关系的工具。<br>你可以在自己的项目中声明所依赖的外部工具库（libraries），<br>Composer 会帮你<code>安装这些依赖的库文件</code>。</p><h2 id="使用汇总"><a class="header-anchor" href="#使用汇总"></a>使用汇总</h2><ol><li>下载&amp;安装</li></ol><ul><li>sudo curl -sS <a href="https://getcomposer.org/installer" rel="external nofollow noopener noreferrer" target="_blank">https://getcomposer.org/installer</a> | sudo php -d detect_unicode=Off</li><li>执行完会生成,composer.phar的文件</li></ul><ol start="2"><li><p>修改权限<br>sudo chmod a+x composer.phar</p></li><li><p>全局安装<br>sudo mv composer.phar /usr/local/bin/composer</p></li><li><p>国内资源<br>composer config -g repo.packagist composer <a href="https://packagist.phpcomposer.com" rel="external nofollow noopener noreferrer" target="_blank">https://packagist.phpcomposer.com</a></p></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#### 如果 Composer 更新仍然慢，就在项目中执行以下命令</span></span><br><span class="line">composer config repo.packagist composer https:<span class="comment">//packagist.phpcomposer.com</span></span><br><span class="line"><span class="comment">#### 上述命令将会在当前项目中的 composer.json 文件的末尾自动添加镜像的配置信息（你也可以自己手工添加）：</span></span><br><span class="line"><span class="string">"repositories"</span>: &#123;</span><br><span class="line">        <span class="string">"packagist"</span>: &#123; </span><br><span class="line">                <span class="string">"type"</span>: <span class="string">"composer"</span>, </span><br><span class="line">                <span class="string">"url"</span> : <span class="string">"https://packagist.phpcomposer.com"</span> </span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>laravel 常用的包</li></ol><blockquote><ul><li>“predis/predis”:&quot;~1.0&quot;,</li><li>“maatwebsite/excel”: “~2.1.0”,</li><li>“nmred/kafka-php”: “0.2.*”</li><li>“itsgoingd/clockwork”: “^2.0”</li></ul></blockquote><ol start="6"><li>安装示例</li></ol><ul><li><p>以安装itsgoingd/clockwork 为例</p></li><li><p><a href="https://packagist.org/packages/itsgoingd/clockwork" rel="external nofollow noopener noreferrer" target="_blank">composer 包地址</a></p></li><li><p>安装 <code>composer require itsgoingd/clockwork</code></p></li><li><p>配置:</p><ul><li>config/app.php</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 服务提供者</span></span><br><span class="line"><span class="string">'providers'</span> =&gt; [</span><br><span class="line">...</span><br><span class="line">Clockwork\Support\Laravel\ClockworkServiceProvider::class</span><br><span class="line">]</span><br><span class="line"> <span class="comment">// 别名声明</span></span><br><span class="line"> <span class="string">'aliases'</span> =&gt; [</span><br><span class="line">     ...</span><br><span class="line">     <span class="string">'Clockwork'</span> =&gt; Clockwork\Support\Laravel\Facade::class,</span><br><span class="line"> ]</span><br></pre></td></tr></table></figure></li><li><p>生成配置文件</p></li></ul> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan vendor:publish</span><br></pre></td></tr></table></figure><h2 id="引用"><a class="header-anchor" href="#引用"></a>引用</h2><blockquote><p>记录点滴，成为更好的自己。       — <a href="http://weizhuo.ma" rel="external nofollow noopener noreferrer" target="_blank">weizhuo.ma</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;composer&lt;/code&gt; 在laravel 框架 使用中的汇总,包括安装及引入包&lt;/p&gt;
&lt;h2 id=&quot;是什么&quot;&gt;&lt;a class=&quot;
      
    
    </summary>
    
      <category term="程序语言" scheme="http://wiki.maweizhuo.com/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/"/>
    
      <category term="PHP" scheme="http://wiki.maweizhuo.com/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/PHP/"/>
    
    
      <category term="composer" scheme="http://wiki.maweizhuo.com/tags/composer/"/>
    
      <category term="php" scheme="http://wiki.maweizhuo.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>mysql常用汇总</title>
    <link href="http://wiki.maweizhuo.com/posts/mysql%E5%B8%B8%E7%94%A8%E6%B1%87%E6%80%BB/"/>
    <id>http://wiki.maweizhuo.com/posts/mysql常用汇总/</id>
    <published>2017-11-22T08:53:30.000Z</published>
    <updated>2017-11-23T09:53:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a class="header-anchor" href="#背景"></a>背景</h2><p><code>mysql</code> 日常使用中遇到的一些问题及总结</p><h2 id="安装相关"><a class="header-anchor" href="#安装相关"></a>安装相关</h2><ol><li>创建mysql用户</li></ol><ul><li><p><strong><em>新建用户，并具有远程登录的权限</em></strong></p><p>grant all privileges on <em>.</em> to ‘langyage’@’%’ identified by ‘123456’ with grant option;</p><p>新建langyage用户并给他在所有主机登录的权限，用的密码是123456；</p><pre><code> GRANT Select ON *.* TO reader@&quot;%&quot;  IDENTIFIED BY &quot;123456&quot;;  新建 reader 用户并给他在所有主机登录的权限，用的密码是123456；</code></pre></li><li><p><strong><em>删除user=’'的记录</em></strong><br>delete from mysql.user where User=’’</p></li><li><p><strong><em>修改root密码</em></strong><br>update mysql.user set password=PASSWORD(‘123456’) where User=‘root’;<br>flush privileges;</p></li></ul><ol start="2"><li>导入导出数据库</li></ol><ul><li><strong>导出</strong><br>// mysql 导出远程数据库DF_Jubao complaint表数据 到db.sql文件中<br><code>mysqldump</code> -h10.11.1.73 -uyangzi -P7550 -pd74u0oTw35 DF_Jubao complaint --skip-lock-tables &gt; /home/public/users/maweizhuo/www/db.sql<br><code>mysqldump</code> -h10.81.1.73 -uyangzi -P7550 -pd74u0oTw35 DF_Jubao complaint --where=“ucid=11142467” &gt; /home/public/users/maweizhuo/www/test.sql</li></ul><pre><code>&gt; --skip-lock-tables // 跳过锁表，普通用户无锁表权限&gt; --where=&quot;&quot;  导出某个条件下某个数据表到指定文件中&gt; --default-character-set=utf8 </code></pre><ul><li><strong>导入</strong><br>方法一：<br>（1）选择数据库<br>mysql&gt;use abc;<br>（2）设置数据库编码<br>mysql&gt;set names utf8;<br>（3）导入数据（注意sql文件的路径）<br><code>mysql&gt;source /home/abc/abc.sql;</code><br>方法二：<br>mysql -u用户名 -p密码 数据库名 &lt; 数据库名.sql<br><code>mysql -uabc_f -p abc &lt; abc.sql</code></li></ul><h2 id="sql相关"><a class="header-anchor" href="#sql相关"></a>SQL相关</h2><ol><li>查询<code>重复字段</code>出现的次数</li></ol> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select user_name,count(*) as count from user_table group by user_name having count&gt;1;</span><br></pre></td></tr></table></figure><h2 id="面试常问"><a class="header-anchor" href="#面试常问"></a>面试常问</h2><ol><li><p>为什么<strong><em>存储引擎</em></strong> mysiam 查询比innodb 快<br>mysiam 和innodb ，mysiam检索快的原因是数据策略是<code>b+树</code>，在节点上指向物理位置的指针，<br>故快，而innodb是索引节点存的是主键id,所以要根据主键进行2次查找</p></li><li><p>数据库<strong><em>事务的四个特性</em></strong>及含义<br>数据库事务transanction正确执行的四个基本要素。<br><code>ACID</code>,原子性(Atomicity)、一致性(Correspondence)、隔离性(Isolation)、持久性(Durability)。<br><strong>原子性:</strong> 整个事务中的所有操作，要么全部完成，要么全部不完成，不可能停滞在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。<br><strong>一致性:</strong> 在事务开始之前和事务结束以后，数据库的完整性约束没有被破坏。<br><strong>隔离性:</strong> 隔离状态执行事务，使它们好像是系统在给定时间内执行的唯一操作。如果有两个事务，运行在相同的时间内，执行 相同的功能，事务的隔离性将确保每一事务在系统中认为只有该事务在使用系统。这种属性有时称为串行化，为了防止事务操作间的混淆，必须串行化或序列化请 求，使得在同一时间仅有一个请求用于同一数据。<br><strong>持久性:</strong> 在事务完成以后，该事务所对数据库所作的更改便持久的保存在数据库之中，并不会被回滚。</p></li></ol><h2 id="引用"><a class="header-anchor" href="#引用"></a>引用</h2><blockquote><p>记录点滴，成为更好的自己。       — <a href="http://weizhuo.ma" rel="external nofollow noopener noreferrer" target="_blank">weizhuo.ma</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;mysql&lt;/code&gt; 日常使用中遇到的一些问题及总结&lt;/p&gt;
&lt;h2 id=&quot;安装相关&quot;&gt;&lt;a class=&quot;header-anchor&quot;
      
    
    </summary>
    
      <category term="程序语言" scheme="http://wiki.maweizhuo.com/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/"/>
    
      <category term="MYSQL" scheme="http://wiki.maweizhuo.com/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/MYSQL/"/>
    
    
      <category term="mysql" scheme="http://wiki.maweizhuo.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>linux命令汇总</title>
    <link href="http://wiki.maweizhuo.com/posts/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/"/>
    <id>http://wiki.maweizhuo.com/posts/linux常用命令汇总/</id>
    <published>2017-11-22T06:55:30.000Z</published>
    <updated>2017-11-22T09:56:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a class="header-anchor" href="#背景"></a>背景</h2><p><code>linux</code> 环境是多数RD必须要用的一个环境,其中一些常见的命令,也必须会使用</p><h2 id="常用汇总"><a class="header-anchor" href="#常用汇总"></a>常用汇总</h2><ol><li><p><code>递归</code>创建目录<br><strong>mkdir -p /home/dir1/dir2</strong></p></li><li><p><code>查找文件名</code><br><code>find</code> /路径 -iname ‘文件名*’</p></li><li><p><code>查找内容</code><br>find /usr/ -type f |xargs grep 'bind-address’<br>或 <code>grep</code> -r ‘bind-address’ /usr</p></li><li><p>tar/unzip 命令解压到<code>指定目录</code><br>tar zxvf elasticsearch-5.4.1.tar.gz <code>-C</code>/usr/local/<br>unzip test.zip <code>-d</code> /root/</p></li><li><p>查看文件最新内容<br>tail -f /user/log.txt</p></li></ol><h2 id="引用"><a class="header-anchor" href="#引用"></a>引用</h2><blockquote><p>记录点滴，成为更好的自己。       — <a href="http://weizhuo.ma" rel="external nofollow noopener noreferrer" target="_blank">weizhuo.ma</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;linux&lt;/code&gt; 环境是多数RD必须要用的一个环境,其中一些常见的命令,也必须会使用&lt;/p&gt;
&lt;h2 id=&quot;常用汇总&quot;&gt;&lt;a cla
      
    
    </summary>
    
      <category term="编程艺术" scheme="http://wiki.maweizhuo.com/categories/%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF/"/>
    
      <category term="Linux" scheme="http://wiki.maweizhuo.com/categories/%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF/Linux/"/>
    
    
      <category term="Linux" scheme="http://wiki.maweizhuo.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>linux php 自带扩展编译安装</title>
    <link href="http://wiki.maweizhuo.com/posts/linux%20php%20%E8%87%AA%E5%B8%A6%E6%89%A9%E5%B1%95%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/"/>
    <id>http://wiki.maweizhuo.com/posts/linux php 自带扩展编译安装/</id>
    <published>2017-11-22T06:54:30.000Z</published>
    <updated>2017-11-22T09:33:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a class="header-anchor" href="#背景"></a>背景</h2><p><code>php</code> 安装自带或下载的扩展,需要编译安装</p><h2 id="步骤"><a class="header-anchor" href="#步骤"></a>步骤</h2><ol><li><p>进入到PHP 源码扩展目录<br>cd software/tar/php-7.0.2/ext/</p></li><li><p>进入需要安装的扩展目录比如 exif<br>cd exif</p></li><li><p>执行phpize （ 编译前准备）<br>/usr/local/php/bin/phpize</p></li><li><p>配置，并指向PHP配置文件位置<br>./configure <code>--with-php-config=/usr/local/php/bin/php-config</code></p></li><li><p>make <a href="http://xn--modulesexif-jq8q13iv7oyks5z4ahbaz08guj5grth.so" rel="external nofollow noopener noreferrer" target="_blank">会在当前modules目录下生成exif.so</a></p></li><li><p>make install 会把exif.so复制到<br>/usr/local/php/lib/php/extensions/no-debug-non-zts-20151012/</p></li><li><p>编辑php.ini<br>extension = <a href="http://exif.so" rel="external nofollow noopener noreferrer" target="_blank">exif.so</a></p></li><li><p>重启服务<br>重启php-fpm 或Apache看phpinfo会有对应扩展</p></li></ol><h2 id="引用"><a class="header-anchor" href="#引用"></a>引用</h2><blockquote><p>记录点滴，成为更好的自己。       — <a href="http://weizhuo.ma" rel="external nofollow noopener noreferrer" target="_blank">weizhuo.ma</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;php&lt;/code&gt; 安装自带或下载的扩展,需要编译安装&lt;/p&gt;
&lt;h2 id=&quot;步骤&quot;&gt;&lt;a class=&quot;header-anchor&quot; h
      
    
    </summary>
    
      <category term="程序语言" scheme="http://wiki.maweizhuo.com/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/"/>
    
      <category term="PHP" scheme="http://wiki.maweizhuo.com/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/PHP/"/>
    
    
      <category term="php" scheme="http://wiki.maweizhuo.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>laravel相关</title>
    <link href="http://wiki.maweizhuo.com/posts/laravel%E7%9B%B8%E5%85%B3/"/>
    <id>http://wiki.maweizhuo.com/posts/laravel相关/</id>
    <published>2017-11-22T06:53:30.000Z</published>
    <updated>2017-11-23T09:53:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a class="header-anchor" href="#背景"></a>背景</h2><p><code>laravel</code> 日常使用中遇到的一些问题及总结</p><h2 id="问题汇总"><a class="header-anchor" href="#问题汇总"></a>问题汇总</h2><ol><li><code>框架安装完</code>需要做的事情</li></ol><ul><li>.env 文件创建,修改里面的配置</li><li>chmod -R 777 storage/</li></ul><ol start="2"><li>如何去掉<code>notice错误,undefined index ..</code> 提示<br>当你修改php.ini 里的error_reporting 后会发现,laravel 还是会报错,因为laravel 底层对<br>php.ini 里的变量进行重写了。</li></ol><p>修改地址:vendor/laravel/framework/src/Illuminate/Foundation/Bootstrap/HandleExceptions.php<br>修改 <code>error_reporting(E_ALL &amp; ~E_NOTICE)</code></p><ol start="3"><li><p><code>session</code>问题</p><ul><li>现象： 登录接口 session::put(‘user_id’,1)<br>退出接口 session::forget(‘user_id’);<br>用户信息 查询 session::get(‘user_id’)，还有数据，不正常。</li><li>解决办法：<br>在退出接口里session::forget 或put空数据之后<br>再加上一行代码 <code>session::save()</code>即可</li></ul></li><li><p>如何<code>添加异常</code>提示<br>位置:代码文件位置在app/Exceptions/Handler.php</p></li></ol>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span><span class="params">($request, Exception $exception)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;isHttpException($exception)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">parent</span>::render($request, $exception);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> response()-&gt;json([</span><br><span class="line">            <span class="string">'code'</span>=&gt;$exception-&gt;getCode(),</span><br><span class="line">            <span class="string">'msg'</span>=&gt;$exception-&gt;getMessage(),</span><br><span class="line">        ] );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><code>ubuntu 安装完之后composor</code> 报错</li></ol><ul><li><p>现象: 通过composer安装laravel框架过程中将需要调用<code>ext-dom</code>，若xml扩展未安装，这也会影响我们安装laravel。<br>以上两个扩展是PHP7版本安装laravel所依赖也是容易被忽略的扩展，<br>当你安装laravel无法正常生成vendor目录时就需要检查mbstring扩展加载情况了。</p></li><li><p>解决   安装也是简单的：<br>apt-get install php7.0-mbstring</p><p>若提示：phpunit/phpunit 5.0.x requires ext-dom * -&gt; the requested PHP extension dom is missing from your system.<br>则需要安装xml扩展。<br>apt-get install php7.0-xml</p></li></ul><ol start="6"><li><code>group by</code> 用法</li></ol>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ReviewMark::whereIn(<span class="string">'package_id'</span>, $review_pid)</span><br><span class="line">    -&gt;where(<span class="string">'is_cancel'</span>, <span class="number">1</span>)</span><br><span class="line">    -&gt;where(<span class="string">"l4_answers"</span>, <span class="string">"!="</span>, <span class="string">''</span>)-&gt;select(\DB::raw(<span class="string">'package_id,count(1) as num'</span>))</span><br><span class="line">    -&gt;groupBy(<span class="string">'package_id'</span>)-&gt;get()-&gt;toArray();</span><br></pre></td></tr></table></figure><ol start="7"><li><p>laravel <code>定时任务不执行</code>的问题</p><ul><li><p>laravel 定时任务设置不重复执行的话会生成一个加密文件，当完成这个任务时候，会删掉这个文件。<br>如果不删掉的话这个任务会一直不执行。</p></li><li><p>kernel.php 里 command 里面名称的方法命名，如果包含下划线也不执行，如commad(‘m_r_diff:sync’)</p></li></ul></li><li><p><code>composer</code> 安装<br>curl -sS <a href="https://getcomposer.org/installer" rel="external nofollow noopener noreferrer" target="_blank">https://getcomposer.org/installer</a> | /data/soft/php-fpm_9000/bin/php<br>sudo mv composer.phar /usr/local/bin/composer</p></li><li><p><code>job</code> 的使用</p><ul><li><p>生成文件</p><p>在app目录下job 目录生成队列任务</p><p>php artisan make:job SendReminderEmail</p></li><li><p>添加到队列</p><p>a. 默认<br>queue::push(new SendReminderEmail());</p><p>b. 指定队列名<br>queue::pushOn(‘queue_name’,new SendReminderEmail());</p></li><li><p>执行队列</p><p>a. php artisan queue:work/listen 执行/监听</p><p>b. 指定执行某个队列名</p><pre><code> --queue参数指定  php artisan queue:work --queue='queue_name' --tries=3 --sleep=2</code></pre></li></ul></li><li><p>邮箱配置</p></li></ol>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MAIL_DRIVER=smtp</span><br><span class="line">MAIL_HOST=smtp.163.com</span><br><span class="line">MAIL_PORT=465</span><br><span class="line">MAIL_USERNAME=maweizhuo1314@163.com</span><br><span class="line">MAIL_PASSWORD=yourpassword</span><br><span class="line">MAIL_ENCRYPTION=ssl</span><br></pre></td></tr></table></figure><ol start="11"><li>发送<code>邮件乱码</code></li></ol>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$message-&gt;attach($attachment,[<span class="string">'as'</span>=&gt;<span class="string">"=?UTF-8?B?"</span>.base64_encode(<span class="keyword">$this</span>-&gt;pad_filename).<span class="string">"?=.doc"</span>]);</span><br></pre></td></tr></table></figure><ol start="12"><li><code>安装laravel</code></li></ol><ul><li><p>a. 创建</p><p>composer create-project laravel/laravel=5.1.* --prefer-dist</p></li><li><p>b. 采用国内的包管理</p></li></ul><p>composer config -g repositories.packagist composer <a href="http://packagist.phpcomposer.com" rel="external nofollow noopener noreferrer" target="_blank">http://packagist.phpcomposer.com</a></p><ul><li>c. 全局配置</li></ul><p>composer config -g secure-http false</p><ol start="13"><li>框架安装<code>redis 引入包</code></li></ol><p><strong>注:</strong> 需要引入的包可访问<br><a href="http://packagist.phpcomposer.com" rel="external nofollow noopener noreferrer" target="_blank">package国内镜像官网</a><br><a href="https://packagist.org/" rel="external nofollow noopener noreferrer" target="_blank">各种引入包下载地址</a></p><ul><li>修改 项目Conposer.json文件</li><li>删除Conposer.lock</li><li>执行composer clearcache</li><li>执行composer update</li><li>执行：composer require predis/predis</li></ul><ol start="14"><li>框架<code>优缺点</code></li></ol><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>核心ioc容器</td><td>臃肿</td></tr><tr><td>依赖注入思想</td><td>写一个服务默认会引入多个类</td></tr><tr><td>中间件</td><td>慢</td></tr><tr><td>composer 包管理</td><td>资源消耗大</td></tr><tr><td>定时脚本开发</td><td></td></tr></tbody></table><h2 id="引用"><a class="header-anchor" href="#引用"></a>引用</h2><blockquote><p>记录点滴，成为更好的自己。       — <a href="http://weizhuo.ma" rel="external nofollow noopener noreferrer" target="_blank">weizhuo.ma</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;laravel&lt;/code&gt; 日常使用中遇到的一些问题及总结&lt;/p&gt;
&lt;h2 id=&quot;问题汇总&quot;&gt;&lt;a class=&quot;header-ancho
      
    
    </summary>
    
      <category term="程序语言" scheme="http://wiki.maweizhuo.com/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/"/>
    
      <category term="PHP" scheme="http://wiki.maweizhuo.com/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/PHP/"/>
    
    
      <category term="php" scheme="http://wiki.maweizhuo.com/tags/php/"/>
    
      <category term="laravel" scheme="http://wiki.maweizhuo.com/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>mac 工具软件</title>
    <link href="http://wiki.maweizhuo.com/posts/mac%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6/"/>
    <id>http://wiki.maweizhuo.com/posts/mac工具软件/</id>
    <published>2017-11-22T06:51:30.000Z</published>
    <updated>2018-01-05T08:21:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mac-常用工具下载地址汇总"><a class="header-anchor" href="#mac-常用工具下载地址汇总"></a>mac 常用工具下载地址汇总</h2><blockquote><ul><li><a href="http://www.cnblogs.com/wulaoer/p/5538721.html" rel="external nofollow noopener noreferrer" target="_blank">securecrt</a></li><li><a href="http://www.sdifen.com/charles4.html" rel="external nofollow noopener noreferrer" target="_blank">charles 抓包工具</a></li><li><a href="https://pan.baidu.com/share/init?surl=kVhhv63" rel="external nofollow noopener noreferrer" target="_blank">phpstorm 网盘地址</a> 密码:iueh<br><a href="http://www.sdifen.com/phpstorm20162.html" rel="external nofollow noopener noreferrer" target="_blank">安装参考地址</a></li><li><a href="http://www.sequelpro.com/download" rel="external nofollow noopener noreferrer" target="_blank">数据库管理工具 sequelpro</a></li><li>postman 和 navicat 在我的百度云网盘</li><li><a href="https://github.com/racaljk/hosts" rel="external nofollow noopener noreferrer" target="_blank">翻墙host</a></li></ul></blockquote><h2 id="引用"><a class="header-anchor" href="#引用"></a>引用</h2><blockquote><p>记录点滴，成为更好的自己。       — <a href="http://weizhuo.ma" rel="external nofollow noopener noreferrer" target="_blank">weizhuo.ma</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;mac-常用工具下载地址汇总&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#mac-常用工具下载地址汇总&quot;&gt;&lt;/a&gt;mac 常用工具下载地址汇总&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cn
      
    
    </summary>
    
      <category term="工具软件" scheme="http://wiki.maweizhuo.com/categories/%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="Mac" scheme="http://wiki.maweizhuo.com/categories/%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6/Mac/"/>
    
    
      <category term="tool" scheme="http://wiki.maweizhuo.com/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>Git 常用命令</title>
    <link href="http://wiki.maweizhuo.com/posts/Git%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://wiki.maweizhuo.com/posts/Git 常用命令/</id>
    <published>2017-11-22T01:51:30.000Z</published>
    <updated>2017-12-07T07:50:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git-clone"><a class="header-anchor" href="#git-clone"></a>git clone</h2><p>克隆一个版本仓库命令<br>常用参数还有<br><code>git clone url --depth=1</code><br>(加上这个参数可以避免项目太大，下载失败；<br><strong>–depth=1</strong> 是指只拉取最后一次的提交结果。);</p><p><code>git clone url new_name</code></p><p><strong>生成裸仓库文件</strong><br>进入git源目录 , 生成无版本控制的新文件<br><code>git archive -o latest.zip HEAD 基于最新提交建立归档文件latest.zip</code></p><h2 id="git-init"><a class="header-anchor" href="#git-init"></a>git init</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git init 初始化</span><br><span class="line">     git branch branch_name</span><br><span class="line">    git branch -D branch_name 删除分支</span><br><span class="line">     git checkout -b branch_name 新建并切换为这个分支</span><br><span class="line">     git pull origin master 更新  = git fetch (拉取远程代码不</span><br><span class="line"> 自动合并) + git merge</span><br></pre></td></tr></table></figure><h2 id="git-merge"><a class="header-anchor" href="#git-merge"></a>git merge</h2> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 从主干合并分支代码</span><br><span class="line">1. 切换到master</span><br><span class="line">   git checkout master</span><br><span class="line">2.  合并代码到主干</span><br><span class="line">    git merge --no-ff develop</span><br><span class="line">    --no-ff 保留该版本提交的log</span><br><span class="line">3.  推送到远程</span><br><span class="line">     git push</span><br></pre></td></tr></table></figure><h2 id="git-push"><a class="header-anchor" href="#git-push"></a>git push</h2> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">     git rm a.txt  // 删除文件</span><br><span class="line">     git commit -m &apos;备注&apos;</span><br><span class="line">     git push origin master</span><br><span class="line">     git push origin develop  （develop为远程分支名）</span><br><span class="line"></span><br><span class="line">     git log</span><br><span class="line">     git status</span><br></pre></td></tr></table></figure><h2 id="git-reset"><a class="header-anchor" href="#git-reset"></a>git reset</h2> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//  冲突之后 ,以下命令回退还原</span><br><span class="line">git reset --hard HEAD^  // 最新的一次提交</span><br><span class="line">git checkout 文件路径</span><br><span class="line">git revert </span><br><span class="line"></span><br><span class="line">   冲突放弃本地修改 的改法</span><br><span class="line">git reset --hard</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><h2 id="git-tag"><a class="header-anchor" href="#git-tag"></a>git tag</h2> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git标签使用</span><br><span class="line">-- 新建tag v1.0</span><br><span class="line"> git tag -a v1.0 -m &apos;v1.0 release&apos;</span><br><span class="line">-- 推送tag v1.0 到远程库</span><br><span class="line">  git push  origin v1.0</span><br><span class="line">-- 删除本地tag</span><br><span class="line">git tag -d v1.0</span><br><span class="line">-- 删除远程tag</span><br><span class="line">git push origin --delete v1.0</span><br></pre></td></tr></table></figure><h2 id="引用"><a class="header-anchor" href="#引用"></a>引用</h2><blockquote><p>记录点滴，成为更好的自己。       — <a href="http://weizhuo.ma" rel="external nofollow noopener noreferrer" target="_blank">weizhuo.ma</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;git-clone&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#git-clone&quot;&gt;&lt;/a&gt;git clone&lt;/h2&gt;
&lt;p&gt;克隆一个版本仓库命令&lt;br&gt;
常用参数还有&lt;br&gt;
&lt;code&gt;git clone url --depth=1&lt;
      
    
    </summary>
    
      <category term="编程艺术" scheme="http://wiki.maweizhuo.com/categories/%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF/"/>
    
      <category term="Git" scheme="http://wiki.maweizhuo.com/categories/%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF/Git/"/>
    
    
      <category term="Git" scheme="http://wiki.maweizhuo.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git 清理已追踪或未添加追踪的文件</title>
    <link href="http://wiki.maweizhuo.com/posts/Git%20%E6%B8%85%E7%90%86%E5%B7%B2%E8%BF%BD%E8%B8%AA%E6%88%96%E6%9C%AA%E6%B7%BB%E5%8A%A0%E8%BF%BD%E8%B8%AA%E7%9A%84%E6%96%87%E4%BB%B6/"/>
    <id>http://wiki.maweizhuo.com/posts/Git 清理已追踪或未添加追踪的文件/</id>
    <published>2017-11-21T01:51:30.000Z</published>
    <updated>2017-11-23T09:53:26.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>git add</code> 将文件及其修改添加到 Git 索引和追踪当中，也就是将文件快照放入暂存区当中，但我们有时候想要<strong>丢弃本次修改过并添加到暂存区的内容</strong>，或者需要<strong>删除未被追踪的文件</strong>。</p><h2 id="git-checkout"><a class="header-anchor" href="#git-checkout"></a>git checkout</h2><p><code>git checkout</code> 是把文件<strong>从暂存区中恢复到工作区</strong>，也就是说源文件如果被修改，再使用 <code>git add</code> 添加到暂存区了，<code>git checkout</code> 无法把他再恢复到源文件，只能恢复到暂存时的状态。</p><h2 id="git-reset"><a class="header-anchor" href="#git-reset"></a>git reset</h2><p><code>git reset</code> 可以用来重置工作区和暂存区还能更改 <code>HEAD</code> 指向，可以达到我们的丢弃本次修改到暂存区的目的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Usage: git reset [&lt;mode&gt;] [&lt;commit&gt;]</span></span><br><span class="line"><span class="comment"># eg: git reset --mixed HEAD</span></span><br><span class="line">$ git reset HEAD</span><br><span class="line">$ git checkout .</span><br></pre></td></tr></table></figure><p>首先使用 <code>git reset HEAD</code> 把暂存区重置到本次提交，再用 <code>checkout</code> 恢复文件到暂存区的状态，但我们暂存区已经重置了，所以实际 <code>checkout</code> 恢复到的是本次提交时的初始状态了。</p><p><code>git reset</code> 有五种模式，不写明模式参数时，默认为 <code>--mixed</code>，几种模式间主要的差异在于重置的区域不同，这里总结下其异同：（表中不写的位置代表无操作）</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">重置工作区</th><th style="text-align:center">重置暂存区</th><th style="text-align:center">将 HEAD 指向指定 commit</th></tr></thead><tbody><tr><td style="text-align:center">–hard</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center">–soft</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">√</td></tr><tr><td style="text-align:center">–mixed</td><td style="text-align:center"></td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center">–merge</td><td style="text-align:center"></td><td style="text-align:center">暂存区有文件则重置失败</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center">–keep</td><td style="text-align:center"></td><td style="text-align:center">暂存区有文件则重置失败</td><td style="text-align:center">√</td></tr></tbody></table><p>所以刚才上面两行命令， <code>reset</code> 后再 <code>checkou</code> ，可以用 <code>--hard</code> 代替：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD</span><br></pre></td></tr></table></figure><h2 id="git-clean"><a class="header-anchor" href="#git-clean"></a>git clean</h2><p>顺便一提，<code>git reset --hard</code> 是直接重置整个工作区，所以也会把未被添加追踪的新文件也删除了；但 <code>git checkout</code> 是恢复，所以不会影响未添加追踪的新文件。</p><p><code>git clean</code> 就是用来删除未被添加追踪的文件和文件夹的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clean -n  <span class="comment"># 将显示哪些未被追踪的文件和文件夹可以清理</span></span><br><span class="line">git clean -d  <span class="comment"># 清理未被追踪的文件夹</span></span><br><span class="line">git clean -f  <span class="comment"># 清理未被追踪的文件</span></span><br><span class="line">git clean -df  <span class="comment"># 清理未被追踪的文件和文件夹</span></span><br></pre></td></tr></table></figure><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><blockquote><ul><li><a href="http://blog.csdn.net/hudashi/article/details/7664464/" rel="external nofollow noopener noreferrer" target="_blank">git reset简介</a></li><li><a href="http://blog.csdn.net/felix_f/article/details/8777463" rel="external nofollow noopener noreferrer" target="_blank">Git 工作区、暂存区和版本库</a></li><li><a href="http://blog.csdn.net/yang3wei/article/details/9399723" rel="external nofollow noopener noreferrer" target="_blank">git 删除已经 add 的文件</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;git add&lt;/code&gt; 将文件及其修改添加到 Git 索引和追踪当中，也就是将文件快照放入暂存区当中，但我们有时候想要&lt;strong&gt;丢弃本次修改过并添加到暂存区的内容&lt;/strong&gt;，或者需要&lt;strong&gt;删除未被追踪的文件&lt;/strong&gt;。&lt;/p
      
    
    </summary>
    
      <category term="编程艺术" scheme="http://wiki.maweizhuo.com/categories/%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF/"/>
    
      <category term="Git" scheme="http://wiki.maweizhuo.com/categories/%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF/Git/"/>
    
    
      <category term="Git" scheme="http://wiki.maweizhuo.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>hexo安装使用</title>
    <link href="http://wiki.maweizhuo.com/posts/hexo%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/"/>
    <id>http://wiki.maweizhuo.com/posts/hexo安装使用/</id>
    <published>2017-09-25T15:04:48.000Z</published>
    <updated>2017-11-29T07:48:29.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a class="header-anchor" href="#安装"></a>安装</h2><ol><li>首先需要安装node.js 和npm</li><li>npm install hexo --no-optional （此参数局部安装） -g(全局安装，之后运行服务会起不来端口可能)</li><li>创建一个网站目录 &amp;&amp; 进入该目录</li><li><strong>初始化</strong> hexo init</li><li><strong>安装</strong> npm install</li><li><strong>启动服务</strong> hexo server</li><li><strong>新建文章</strong><br>hexo new &quot;我的第一篇文章&quot;<br>然后会显示生产的文件地址，进行编辑</li><li>主题配置<br>git clone <a href="mailto:git@github.com" rel="external nofollow noopener noreferrer" target="_blank">git@github.com</a>:litten/hexo-theme-yilia.git themes/yilia</li><li>修改 <strong>_config.yml</strong>(注意：<code>冒号后面要空一格，否则会执行页面报错</code>)<br>theme: yilia</li><li>生效配置(<strong>常用的命令</strong>)<br><code>hexo clean</code><br><code>hexo g (generate)</code><br><code>hexo s (server) 启动服务</code></li><li><strong>安装git提交代码 扩展</strong><br>npm install hexo-deployer-git --save</li><li><strong>发布</strong><br>hexo d (deploy)</li></ol><h2 id="常见问题"><a class="header-anchor" href="#常见问题"></a>常见问题</h2><ol><li>readme.md文件 会<code>被解析</code>成HTML<br><strong>解决</strong>: 在根目录下_config.yml 里</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">skip_render:</span><br><span class="line"> - README.md</span><br></pre></td></tr></table></figure><ol start="2"><li>每次编译ico或images会<code>丢掉</code><br><strong>解决</strong>: 在<strong>source目录下放这些源文件</strong>,而不是在public目录下放,因为public目录是<br>hexo g 之后生成的。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;首先需要安装node.js 和npm&lt;/li&gt;
&lt;li&gt;npm install hexo --no-optional （此参数局部安装） -g
      
    
    </summary>
    
      <category term="编程艺术" scheme="http://wiki.maweizhuo.com/categories/%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF/"/>
    
      <category term="个人web" scheme="http://wiki.maweizhuo.com/categories/%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF/%E4%B8%AA%E4%BA%BAweb/"/>
    
    
      <category term="hexo" scheme="http://wiki.maweizhuo.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>点滴人生观念信条</title>
    <link href="http://wiki.maweizhuo.com/posts/%E7%82%B9%E6%BB%B4%E4%BA%BA%E7%94%9F%E8%A7%82%E5%BF%B5%E4%BF%A1%E6%9D%A1/"/>
    <id>http://wiki.maweizhuo.com/posts/点滴人生观念信条/</id>
    <published>2017-09-20T12:28:21.000Z</published>
    <updated>2017-11-24T03:17:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习生活观念-提高生活质量-拒绝直男癌"><a class="header-anchor" href="#学习生活观念-提高生活质量-拒绝直男癌"></a>学习生活观念，提高生活质量，拒绝直男癌</h2><p>优胜劣汰，直男癌去死。</p><h2 id="消费观念：什么层次的人用什么层次的货"><a class="header-anchor" href="#消费观念：什么层次的人用什么层次的货"></a>消费观念：什么层次的人用什么层次的货</h2><p>不要越界追求高端，并不能达到炫耀的目的；也不要刻意低廉、过分节俭，一味去省钱，反而失去更多。</p><p>钱是赚出来的，不是省出来的，赚出来的的钱 “是为了实现一定目标的等价物”。</p><p>参见 <a href="/wiki/%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/%E9%A9%AC%E6%96%AF%E6%B4%9B%E9%9C%80%E6%B1%82%E5%B1%82%E6%AC%A1%E7%90%86%E8%AE%BA/"><strong>马斯洛需求层次理论</strong></a> 、<a href="http://mp.weixin.qq.com/s?src=3&amp;timestamp=1488090359&amp;ver=1&amp;signature=VLFpBV0WLAh1r9I3PBT-9FuDm38jFBrv-*Ia-q56C0NNkousMilz8JavZwOAmUNdkPseSPcDULYLd11CBzeVBNAQnUmxPy55vAPxh17J163O2g2FVSx1w6h2YghhhHCRZWMw7sQhYq0yQwICSRGLTeUwZSa9PtFAYuQrpScgAyg=" rel="external nofollow noopener noreferrer" target="_blank"><strong>曹将 | 从他们分手说起</strong></a>。</p><h2 id="抱目的做事而不是抱期望做事"><a class="header-anchor" href="#抱目的做事而不是抱期望做事"></a>抱目的做事而不是抱期望做事</h2><p>不要报期望。</p><p>任何期望都有实现的可能，但也有落空后的失望，意志不坚的人容易被失望左右，最好是不要抱着任何好的坏的期望，而是抱着某种目的做事，想着要达成目的应该要做什么，通过目的驱动行为，通过目的驱动解决问题。</p><h2 id="遇到问题-事件努力解决"><a class="header-anchor" href="#遇到问题-事件努力解决"></a>遇到问题、事件努力解决</h2><p>不要想着不劳而获，也不要想着该别人做，他不做我去做就吃亏。</p><p>如果于自身利益相关，应该自我主动推动事情发展、解决问题，而不是别人不做我也不做，不要吝啬一丝力气。</p><h2 id="遭遇灾难不要放弃-人活着就有希望"><a class="header-anchor" href="#遭遇灾难不要放弃-人活着就有希望"></a>遭遇灾难不要放弃，人活着就有希望</h2><p>不到最后已经结束就不要放弃。</p><p>人生和生活都是需要活着才能实现，记录人生信条就是因为认为这些信条能帮助人活的更好。</p><h2 id="考虑最坏的打算-提前做好危机准备"><a class="header-anchor" href="#考虑最坏的打算-提前做好危机准备"></a>考虑最坏的打算，提前做好危机准备</h2><p>防人之心不可无，但不等于被害妄想症。<strong>保护自己是必要的，人不能有恃无恐。</strong></p><p>待人和气从哪个方便来说对人对己都有好处，但是和气不等于软弱退让，而是占理但不逼迫强硬。</p><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><blockquote><ul><li><a href="/wiki/%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/%E9%A9%AC%E6%96%AF%E6%B4%9B%E9%9C%80%E6%B1%82%E5%B1%82%E6%AC%A1%E7%90%86%E8%AE%BA/">马斯洛需求层次理论</a></li><li><a href="http://mp.weixin.qq.com/s?src=3&amp;timestamp=1488090359&amp;ver=1&amp;signature=VLFpBV0WLAh1r9I3PBT-9FuDm38jFBrv-*Ia-q56C0NNkousMilz8JavZwOAmUNdkPseSPcDULYLd11CBzeVBNAQnUmxPy55vAPxh17J163O2g2FVSx1w6h2YghhhHCRZWMw7sQhYq0yQwICSRGLTeUwZSa9PtFAYuQrpScgAyg=" rel="external nofollow noopener noreferrer" target="_blank">曹将 | 从他们分手说起</a></li><li><a href="http://www.zhijiandoukou.com/mp/odiucqf.html" rel="external nofollow noopener noreferrer" target="_blank">雷斯林 | “我可以骚，你不能扰”是最没意义的口号</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzA3MjA4MDI5OQ==&amp;mid=2651728468&amp;idx=1&amp;sn=428524e951eeb91bcfa728ba97c47674&amp;chksm=84d94490b3aecd86a1b513df25504c6ac727f514adc98dd8e3b501131a46850187cb3750abf2&amp;mpshare=1&amp;scene=22&amp;srcid=0219FqZAJ85NQ5SrSgpJr3UW#rd" rel="external nofollow noopener noreferrer" target="_blank">雷斯林 | 法律对不怕死的人无解，所以待人和气一点其实对自己也有好处 | 微信</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习生活观念-提高生活质量-拒绝直男癌&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#学习生活观念-提高生活质量-拒绝直男癌&quot;&gt;&lt;/a&gt;学习生活观念，提高生活质量，拒绝直男癌&lt;/h2&gt;
&lt;p&gt;优胜劣汰，直男癌去死。&lt;/p&gt;
&lt;h2 id=&quot;消费
      
    
    </summary>
    
      <category term="生活闲读" scheme="http://wiki.maweizhuo.com/categories/%E7%94%9F%E6%B4%BB%E9%97%B2%E8%AF%BB/"/>
    
    
      <category term="观念信条" scheme="http://wiki.maweizhuo.com/tags/%E8%A7%82%E5%BF%B5%E4%BF%A1%E6%9D%A1/"/>
    
  </entry>
  
  <entry>
    <title>CSS属性声明顺序规范</title>
    <link href="http://wiki.maweizhuo.com/posts/CSS%E5%B1%9E%E6%80%A7%E5%A3%B0%E6%98%8E%E9%A1%BA%E5%BA%8F%E8%A7%84%E8%8C%83/"/>
    <id>http://wiki.maweizhuo.com/posts/CSS属性声明顺序规范/</id>
    <published>2017-08-27T15:04:48.000Z</published>
    <updated>2017-11-23T09:57:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="css-属性声明顺序规范"><a class="header-anchor" href="#css-属性声明顺序规范"></a>CSS 属性声明顺序规范</h1><p>很多 CSS 规范的属性顺序都各不一样，这东西也不像 <a href="https://vuejs.org/v2/style-guide/index.html#Component-instance-options-order-recommended" rel="external nofollow noopener noreferrer" target="_blank">Vue 组件属性顺序</a> 一样有官方规范，这里记录下我目前认为合适的一种顺序。</p><h2 id="属性分类顺序"><a class="header-anchor" href="#属性分类顺序"></a>属性分类顺序</h2><ul><li>显示方法 &amp; 布局</li><li>定位</li><li>盒模型框<ul><li>外边距</li><li>边框</li><li>内边距</li></ul></li><li>尺寸</li><li>文本样式<ul><li>字体</li><li>文本</li><li>文字颜色</li></ul></li><li>背景</li><li>轮廓</li><li>透明度 &amp; 阴影</li><li>动效<ul><li>过渡</li><li>转换变形</li><li>动画</li></ul></li><li>其他<ul><li>伪类 &amp; 伪元素</li><li>引用</li><li>媒体查询</li></ul></li></ul><h2 id="属性顺序列表"><a class="header-anchor" href="#属性顺序列表"></a>属性顺序列表</h2><blockquote><p>源自 AlloyTeam <a href="http://alloyteam.github.io/CodeGuide/#css-declaration-order" rel="external nofollow noopener noreferrer" target="_blank">CSS Code Guide</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [</span><br><span class="line">    <span class="string">"display"</span>,</span><br><span class="line">    <span class="string">"visibility"</span>,</span><br><span class="line">    <span class="string">"float"</span>,</span><br><span class="line">    <span class="string">"clear"</span>,</span><br><span class="line">    <span class="string">"overflow"</span>,</span><br><span class="line">    <span class="string">"overflow-x"</span>,</span><br><span class="line">    <span class="string">"overflow-y"</span>,</span><br><span class="line">    <span class="string">"clip"</span>,</span><br><span class="line">    <span class="string">"zoom"</span></span><br><span class="line">  ],</span><br><span class="line">  [</span><br><span class="line">    <span class="string">"table-layout"</span>,</span><br><span class="line">    <span class="string">"empty-cells"</span>,</span><br><span class="line">    <span class="string">"caption-side"</span>,</span><br><span class="line">    <span class="string">"border-spacing"</span>,</span><br><span class="line">    <span class="string">"border-collapse"</span>,</span><br><span class="line">    <span class="string">"list-style"</span>,</span><br><span class="line">    <span class="string">"list-style-position"</span>,</span><br><span class="line">    <span class="string">"list-style-type"</span>,</span><br><span class="line">    <span class="string">"list-style-image"</span></span><br><span class="line">  ],</span><br><span class="line">  [</span><br><span class="line">    <span class="string">"position"</span>,</span><br><span class="line">    <span class="string">"top"</span>,</span><br><span class="line">    <span class="string">"right"</span>,</span><br><span class="line">    <span class="string">"bottom"</span>,</span><br><span class="line">    <span class="string">"left"</span>,</span><br><span class="line">    <span class="string">"z-index"</span></span><br><span class="line">  ],</span><br><span class="line">  [</span><br><span class="line">    <span class="string">"margin"</span>,</span><br><span class="line">    <span class="string">"margin-top"</span>,</span><br><span class="line">    <span class="string">"margin-right"</span>,</span><br><span class="line">    <span class="string">"margin-bottom"</span>,</span><br><span class="line">    <span class="string">"margin-left"</span>,</span><br><span class="line">    <span class="string">"box-sizing"</span>,</span><br><span class="line">    <span class="string">"border"</span>,</span><br><span class="line">    <span class="string">"border-width"</span>,</span><br><span class="line">    <span class="string">"border-style"</span>,</span><br><span class="line">    <span class="string">"border-color"</span>,</span><br><span class="line">    <span class="string">"border-top"</span>,</span><br><span class="line">    <span class="string">"border-top-width"</span>,</span><br><span class="line">    <span class="string">"border-top-style"</span>,</span><br><span class="line">    <span class="string">"border-top-color"</span>,</span><br><span class="line">    <span class="string">"border-right"</span>,</span><br><span class="line">    <span class="string">"border-right-width"</span>,</span><br><span class="line">    <span class="string">"border-right-style"</span>,</span><br><span class="line">    <span class="string">"border-right-color"</span>,</span><br><span class="line">    <span class="string">"border-bottom"</span>,</span><br><span class="line">    <span class="string">"border-bottom-width"</span>,</span><br><span class="line">    <span class="string">"border-bottom-style"</span>,</span><br><span class="line">    <span class="string">"border-bottom-color"</span>,</span><br><span class="line">    <span class="string">"border-left"</span>,</span><br><span class="line">    <span class="string">"border-left-width"</span>,</span><br><span class="line">    <span class="string">"border-left-style"</span>,</span><br><span class="line">    <span class="string">"border-left-color"</span>,</span><br><span class="line">    <span class="string">"border-radius"</span>,</span><br><span class="line">    <span class="string">"border-top-left-radius"</span>,</span><br><span class="line">    <span class="string">"border-top-right-radius"</span>,</span><br><span class="line">    <span class="string">"border-bottom-right-radius"</span>,</span><br><span class="line">    <span class="string">"border-bottom-left-radius"</span>,</span><br><span class="line">    <span class="string">"border-image"</span>,</span><br><span class="line">    <span class="string">"border-image-source"</span>,</span><br><span class="line">    <span class="string">"border-image-slice"</span>,</span><br><span class="line">    <span class="string">"border-image-width"</span>,</span><br><span class="line">    <span class="string">"border-image-outset"</span>,</span><br><span class="line">    <span class="string">"border-image-repeat"</span>,</span><br><span class="line">    <span class="string">"padding"</span>,</span><br><span class="line">    <span class="string">"padding-top"</span>,</span><br><span class="line">    <span class="string">"padding-right"</span>,</span><br><span class="line">    <span class="string">"padding-bottom"</span>,</span><br><span class="line">    <span class="string">"padding-left"</span>,</span><br><span class="line">    <span class="string">"width"</span>,</span><br><span class="line">    <span class="string">"min-width"</span>,</span><br><span class="line">    <span class="string">"max-width"</span>,</span><br><span class="line">    <span class="string">"height"</span>,</span><br><span class="line">    <span class="string">"min-height"</span>,</span><br><span class="line">    <span class="string">"max-height"</span></span><br><span class="line">  ],</span><br><span class="line">  [</span><br><span class="line">    <span class="string">"font"</span>,</span><br><span class="line">    <span class="string">"font-family"</span>,</span><br><span class="line">    <span class="string">"font-size"</span>,</span><br><span class="line">    <span class="string">"font-weight"</span>,</span><br><span class="line">    <span class="string">"font-style"</span>,</span><br><span class="line">    <span class="string">"font-variant"</span>,</span><br><span class="line">    <span class="string">"font-size-adjust"</span>,</span><br><span class="line">    <span class="string">"font-stretch"</span>,</span><br><span class="line">    <span class="string">"font-effect"</span>,</span><br><span class="line">    <span class="string">"font-emphasize"</span>,</span><br><span class="line">    <span class="string">"font-emphasize-position"</span>,</span><br><span class="line">    <span class="string">"font-emphasize-style"</span>,</span><br><span class="line">    <span class="string">"font-smooth"</span>,</span><br><span class="line">    <span class="string">"line-height"</span>,</span><br><span class="line">    <span class="string">"text-align"</span>,</span><br><span class="line">    <span class="string">"text-align-last"</span>,</span><br><span class="line">    <span class="string">"vertical-align"</span>,</span><br><span class="line">    <span class="string">"white-space"</span>,</span><br><span class="line">    <span class="string">"text-decoration"</span>,</span><br><span class="line">    <span class="string">"text-emphasis"</span>,</span><br><span class="line">    <span class="string">"text-emphasis-color"</span>,</span><br><span class="line">    <span class="string">"text-emphasis-style"</span>,</span><br><span class="line">    <span class="string">"text-emphasis-position"</span>,</span><br><span class="line">    <span class="string">"text-indent"</span>,</span><br><span class="line">    <span class="string">"text-justify"</span>,</span><br><span class="line">    <span class="string">"letter-spacing"</span>,</span><br><span class="line">    <span class="string">"word-spacing"</span>,</span><br><span class="line">    <span class="string">"text-outline"</span>,</span><br><span class="line">    <span class="string">"text-transform"</span>,</span><br><span class="line">    <span class="string">"text-wrap"</span>,</span><br><span class="line">    <span class="string">"text-overflow"</span>,</span><br><span class="line">    <span class="string">"text-overflow-ellipsis"</span>,</span><br><span class="line">    <span class="string">"text-overflow-mode"</span>,</span><br><span class="line">    <span class="string">"word-wrap"</span>,</span><br><span class="line">    <span class="string">"word-break"</span></span><br><span class="line">  ],</span><br><span class="line">  [</span><br><span class="line">    <span class="string">"color"</span>,</span><br><span class="line">    <span class="string">"background"</span>,</span><br><span class="line">    <span class="string">"background-color"</span>,</span><br><span class="line">    <span class="string">"background-image"</span>,</span><br><span class="line">    <span class="string">"background-repeat"</span>,</span><br><span class="line">    <span class="string">"background-attachment"</span>,</span><br><span class="line">    <span class="string">"background-position"</span>,</span><br><span class="line">    <span class="string">"background-position-x"</span>,</span><br><span class="line">    <span class="string">"background-position-y"</span>,</span><br><span class="line">    <span class="string">"background-clip"</span>,</span><br><span class="line">    <span class="string">"background-origin"</span>,</span><br><span class="line">    <span class="string">"background-size"</span></span><br><span class="line">  ],</span><br><span class="line">  [</span><br><span class="line">    <span class="string">"outline"</span>,</span><br><span class="line">    <span class="string">"outline-width"</span>,</span><br><span class="line">    <span class="string">"outline-style"</span>,</span><br><span class="line">    <span class="string">"outline-color"</span>,</span><br><span class="line">    <span class="string">"outline-offset"</span>,</span><br><span class="line">    <span class="string">"opacity"</span>,</span><br><span class="line">    <span class="string">"box-shadow"</span>,</span><br><span class="line">    <span class="string">"text-shadow"</span></span><br><span class="line">  ],</span><br><span class="line">  [</span><br><span class="line">    <span class="string">"transition"</span>,</span><br><span class="line">    <span class="string">"transition-delay"</span>,</span><br><span class="line">    <span class="string">"transition-timing-function"</span>,</span><br><span class="line">    <span class="string">"transition-duration"</span>,</span><br><span class="line">    <span class="string">"transition-property"</span>,</span><br><span class="line">    <span class="string">"transform"</span>,</span><br><span class="line">    <span class="string">"transform-origin"</span>,</span><br><span class="line">    <span class="string">"animation"</span>,</span><br><span class="line">    <span class="string">"animation-name"</span>,</span><br><span class="line">    <span class="string">"animation-duration"</span>,</span><br><span class="line">    <span class="string">"animation-play-state"</span>,</span><br><span class="line">    <span class="string">"animation-timing-function"</span>,</span><br><span class="line">    <span class="string">"animation-delay"</span>,</span><br><span class="line">    <span class="string">"animation-iteration-count"</span>,</span><br><span class="line">    <span class="string">"animation-direction"</span></span><br><span class="line">  ],</span><br><span class="line">  [</span><br><span class="line">    <span class="string">"content"</span>,</span><br><span class="line">    <span class="string">"quotes"</span>,</span><br><span class="line">    <span class="string">"counter-reset"</span>,</span><br><span class="line">    <span class="string">"counter-increment"</span>,</span><br><span class="line">    <span class="string">"resize"</span>,</span><br><span class="line">    <span class="string">"cursor"</span>,</span><br><span class="line">    <span class="string">"user-select"</span>,</span><br><span class="line">    <span class="string">"nav-index"</span>,</span><br><span class="line">    <span class="string">"nav-up"</span>,</span><br><span class="line">    <span class="string">"nav-right"</span>,</span><br><span class="line">    <span class="string">"nav-down"</span>,</span><br><span class="line">    <span class="string">"nav-left"</span>,</span><br><span class="line">    <span class="string">"tab-size"</span>,</span><br><span class="line">    <span class="string">"hyphens"</span>,</span><br><span class="line">    <span class="string">"pointer-events"</span></span><br><span class="line">  ]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a class="header-anchor" href="#参考链接"></a>参考链接</h2><blockquote><ul><li><a href="http://codeguide.co/#css-declaration-order" rel="external nofollow noopener noreferrer" target="_blank">Code Guide by @mdo</a></li><li><a href="https://github.com/twitter/recess/blob/master/lib/lint/strict-property-order.js#L36" rel="external nofollow noopener noreferrer" target="_blank">RECESS | property order</a></li><li><a href="http://alloyteam.github.io/CodeGuide/#css-declaration-order" rel="external nofollow noopener noreferrer" target="_blank">Code Guide by @AlloyTeam</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;css-属性声明顺序规范&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#css-属性声明顺序规范&quot;&gt;&lt;/a&gt;CSS 属性声明顺序规范&lt;/h1&gt;
&lt;p&gt;很多 CSS 规范的属性顺序都各不一样，这东西也不像 &lt;a href=&quot;https://vue
      
    
    </summary>
    
      <category term="程序语言" scheme="http://wiki.maweizhuo.com/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/"/>
    
      <category term="CSS" scheme="http://wiki.maweizhuo.com/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/CSS/"/>
    
    
      <category term="CSS" scheme="http://wiki.maweizhuo.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>IaaS, PaaS, SaaS 概念</title>
    <link href="http://wiki.maweizhuo.com/posts/IaaS,%20PaaS,%20SaaS%20%E6%A6%82%E5%BF%B5/"/>
    <id>http://wiki.maweizhuo.com/posts/IaaS, PaaS, SaaS 概念/</id>
    <published>2017-08-25T15:04:48.000Z</published>
    <updated>2017-11-23T09:54:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>云服务通常将其提供的服务自下而上分成三层：<strong>基础设施(infrastructure)、平台(platform)和软件(software)</strong>。</p><h2 id="iaas"><a class="header-anchor" href="#iaas"></a>IaaS</h2><p><strong>Infrastructure-as-a-Service(基础设施即服务)</strong></p><p>第一层叫做 IaaS，有时候也叫做 Hardware-as-a-Service，如果你想在办公室或者公司的网站上运行一些应用（比如自己开发好的 APP 或是网络游戏，你需要去买服务器，成本太高了。</p><p>但是现在有IaaS，你可以将硬件外包给这些专业的公司，这些公司会提供场外服务器，存储和网络硬件，你花钱租用就行。</p><p>这样就节省了维护成本和办公场地，并且你可以在任何时候利用这些硬件来运行其应用。</p><h2 id="paas"><a class="header-anchor" href="#paas"></a>PaaS</h2><p><strong>Platform-as-a-Service（平台即服务）</strong></p><p>第二层就是 PaaS，某些时候也叫做中间件。PaaS 是面向软件开发者的服务，云计算平台提供硬件，OS， 编程语言，开发库，部署工具， 帮助软件开发者更快的开发软件服务。</p><p>云服务商将软件开发的云端开发平台和软件运营的云端运行环境（包括中间件、数据库、we b服务、消息总线等基础通用服务）作为一种服务，提供给最终用户。</p><p>换句话说，这些 PaaS 服务商提供的都是基础开发服务平台，主要目的就是让你把精力专注在应用层面的开发上面，而不需要浪费在这些基础重复性的事情上，也不用担心开发完成后部署问题。</p><h2 id="saas"><a class="header-anchor" href="#saas"></a>SaaS</h2><p><strong>Software-as-a-Service（软件即服务）</strong></p><p>简单说就是人家把你想要的功能开发好成应用软件，然后直接卖账号给你用，你也不需要担心服务器、带宽、应用开发等问题，直接交钱使用就行。</p><p>不再面向开发，而是直接面向企业或普通用户，企业改改 logo，直接给用户使用。</p><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://www.aliyun.com/zixun/content/1_5_15871.html" rel="external nofollow noopener noreferrer" target="_blank">IaaS PaaS和SaaS公司的作用 | 盐漂浮草</a></li><li><a href="https://zhihu.com/question/21641778/answer/91301221" rel="external nofollow noopener noreferrer" target="_blank">谁能举个通俗易懂的例子告诉我IAAS，SAAS，PAAS的区别？ | 东坪子的回答</a></li><li><a href="https://zhihu.com/question/21641778/answer/62523535" rel="external nofollow noopener noreferrer" target="_blank">谁能举个通俗易懂的例子告诉我IAAS，SAAS，PAAS的区别？ | 何足道的回答</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;云服务通常将其提供的服务自下而上分成三层：&lt;strong&gt;基础设施(infrastructure)、平台(platform)和软件(software)&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;iaas&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#i
      
    
    </summary>
    
      <category term="编程艺术" scheme="http://wiki.maweizhuo.com/categories/%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF/"/>
    
      <category term="架构" scheme="http://wiki.maweizhuo.com/categories/%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="云服务" scheme="http://wiki.maweizhuo.com/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>awk 管道操作小结</title>
    <link href="http://wiki.maweizhuo.com/posts/awk%20%E7%AE%A1%E9%81%93%E6%93%8D%E4%BD%9C%E5%B0%8F%E7%BB%93/"/>
    <id>http://wiki.maweizhuo.com/posts/awk 管道操作小结/</id>
    <published>2017-08-25T15:04:48.000Z</published>
    <updated>2017-11-23T09:53:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a class="header-anchor" href="#背景"></a>背景</h2><p>大致是希望使用 awk 读取一个文本文件，通过空行把文本分割成多个文本块，依次把每个文本块输入到一个程序，并把结果依次输出到指定文件。</p><p>先看文件结构：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls</span><br><span class="line">plus.sh  data.txt</span><br></pre></td></tr></table></figure><p>其中， <strong><code>plus.sh</code></strong> 文件内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">IFS=<span class="string">" "</span></span><br><span class="line"><span class="built_in">read</span> a b</span><br><span class="line">((c=a+b)) </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;c&#125;</span></span><br></pre></td></tr></table></figure><p>代码含义是从标准输入读入两个数， <code>a</code> 、<code>b</code>，返回 <code>a+b</code> 的结果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ./plus.sh</span><br><span class="line">2 3    <span class="comment"># &lt;-- its my input</span></span><br><span class="line">5      <span class="comment"># --&gt; its result</span></span><br></pre></td></tr></table></figure><p><strong><code>data.txt</code></strong> 中的数据如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0 30</span><br><span class="line"></span><br><span class="line">30 40</span><br><span class="line"></span><br><span class="line">40 80</span><br><span class="line"></span><br><span class="line">80 100</span><br></pre></td></tr></table></figure><p>目标是使用 awk 从 <code>data.txt</code> 中读入 4 组数据，分别输入到 <code>plus.sh</code> 中，返回 4 个结果值，并依次输入到 <code>output.txt</code> 中。预期结果 <code>output.txt</code> 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">30</span><br><span class="line">70</span><br><span class="line">120</span><br><span class="line">180</span><br></pre></td></tr></table></figure><h2 id="经过"><a class="header-anchor" href="#经过"></a>经过</h2><p>一开始，简单的思路是，awk 使用<strong>空行分割文本文件</strong>，把每组文本块<strong>通过管道输入</strong>到调用的 <code>plus.sh</code> 中，再把每组的结果通过<strong>重定向追加</strong>到 <code>output.txt</code> 文件中。</p><p>根据思路于是写出如下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ awk -v RS=<span class="string">""</span> <span class="string">'&#123;print | "./plus.sh &gt;&gt; output.txt"&#125;'</span> data.txt</span><br></pre></td></tr></table></figure><p>然而一看结果，只有第一个分段中求出来的值；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ls</span><br><span class="line">plus.sh  data.txt  output.txt</span><br><span class="line"></span><br><span class="line">$ cat output.txt</span><br><span class="line">30</span><br></pre></td></tr></table></figure><p>经过调试和单独输出，发现分段也没问题，单独 <code>print</code> 也是分段的没问题，于是大概猜测<strong>问题出在重定向上</strong>，除了第一个值以外的其他结果并没有被重定向到文件（此处只是当时猜测，其实不对，请看下文分析）；</p><p>通过查阅 <strong>「awk 使用管道输出到 shell 中」</strong> 的相关资料，找到问题答案：</p><blockquote><p>如果在 awk 程序中打开了管道，必须<strong>先关闭该管道才能打开另一个管道</strong>。也就是说一次只能打开一个管道。</p><p><strong>shell 命令必须被双引号引用起来。</strong></p><p>如果打算<strong>再次</strong>在 awk 程序中使用某个文件或管道进行读写，则可能要先关闭程序，因为其中的管道会保持打开状态直至脚本运行结束。注意，管道一旦被打开，就会保持打开状态直至 awk 退出。</p><p>对于 <code>awk output | shell input</code> 来说，shell 接收 awk 的输出，并进行处理。需要注意的是，<strong>awk 的 output 是先缓存在 pipe 中，等输出完毕后再调用 shell 命令 处理</strong>，shell 命令只处理一次，而且<strong>处理的时机是 「awk程序结束时，或者管道关闭时（需要显式的关闭管道）」</strong></p></blockquote><p>对于刚才的问题，简单的解释就是因为管道缓存，<code>print</code> 的所有输出被堆到一起只传了一次给 <code>plus.sh</code>，而且这一次相当于传了整个文件，但 <code>plus.sh</code> 在读了两个数计算完后就退出了，后面的所有数都没用上，由于 <code>plus.sh</code> 只计算了一次，因此结果也只有一个。（并非上面猜测的结果未被重定向）</p><h2 id="解决尝试"><a class="header-anchor" href="#解决尝试"></a>解决尝试</h2><p>最初的解决尝试是使用 awk 中的 <code>close</code> 命令关闭文件管道，于是写出如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ awk -v RS=<span class="string">""</span> <span class="string">'&#123;print | "./plus.sh &gt;&gt; output.txt"; close("output.txt")&#125;'</span> data.txt</span><br></pre></td></tr></table></figure><p>结果依然只有一个值。。。</p><p>继续查阅资料才知道，<code>close</code> 关闭时需要输入的是<strong>管道描述符</strong>，而非只是文件名，而管道描述符是包含<strong>对管道调用的整个命令在内的 shell 命令字符串</strong>，也就是说，应该是 <code>close(&quot;./plus.sh &gt;&gt; output.txt&quot;)</code> 。</p><p>再次尝试代码修改如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ awk -v RS=<span class="string">""</span> <span class="string">'&#123;print | "./plus.sh &gt;&gt; output.txt"; close("./plus.sh &gt;&gt; output.txt")&#125;'</span> data.txt</span><br><span class="line"></span><br><span class="line">$ cat output.txt</span><br><span class="line">30</span><br><span class="line">70</span><br><span class="line">120</span><br><span class="line">180</span><br></pre></td></tr></table></figure><p>OK，解决问题，这句代码就是能用的了。</p><h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2><p>总结下刚刚踩的坑，再做些优化；</p><ol><li><p>awk 中先关闭该管道才能打开另一个管道；</p></li><li><p><code>awk output | shell input</code> 时，awk 输出缓存到管道中，只有 awk 程序结束时，或者管道关闭时，才把缓存中的所有输出交由 shell 处理；</p></li><li><p>管道描述符是<strong>调用管道的整个 shell 命令字符串</strong>；（如在 <code>print | &quot;./plus.sh &gt;&gt; output.txt&quot;;</code> 中就是 <code>&quot;./plus.sh &gt;&gt; output.txt&quot;</code>）</p></li><li><p>awk 语句中使用 shell 变量</p><ol><li><p><code>&quot;'$var'&quot;</code> 的形式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var=<span class="string">"test"</span></span><br><span class="line">awk <span class="string">'BEGIN&#123;print "'</span><span class="variable">$var</span><span class="string">'"&#125;'</span></span><br></pre></td></tr></table></figure></li><li><p>变量中有空格时使用 <code>&quot;'&quot;$var&quot;'&quot;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var=<span class="string">"this is a test"</span> </span><br><span class="line">awk <span class="string">'BEGIN&#123;print "'</span><span class="string">"<span class="variable">$var</span>"</span><span class="string">'"&#125;'</span></span><br></pre></td></tr></table></figure></li><li><p>变量中有空格，并且变量当作 shell 命令执行时，使用 <code>&quot;\&quot;'&quot;${var}&quot;'\&quot;&quot;</code> 形式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmd=<span class="string">"./plus a and b.sh"</span></span><br><span class="line">awk <span class="string">'BEGIN&#123;print | "\"'</span><span class="string">"<span class="variable">$&#123;cmd&#125;</span>"</span><span class="string">'\""&#125;'</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><p>再把上面 awk 语句写入到一个脚本中，方便调用：</p><p><strong>input_test.sh</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">cmd=<span class="string">"<span class="variable">$&#123;1:-"./main.sh"&#125;</span>"</span></span><br><span class="line">data=<span class="string">"<span class="variable">$&#123;2:-"test_data.txt"&#125;</span>"</span></span><br><span class="line">output=<span class="string">"<span class="variable">$&#123;3:-"stdout.txt"&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">awk -v RS=<span class="string">""</span> <span class="string">'&#123;print $n | "\"'</span><span class="string">"<span class="variable">$&#123;cmd&#125;</span>"</span><span class="string">'\" &gt;&gt; \"'</span><span class="string">"<span class="variable">$&#123;output&#125;</span>"</span><span class="string">'\"";close("\"'</span><span class="string">"<span class="variable">$&#123;cmd&#125;</span>"</span><span class="string">'\" &gt;&gt; \"'</span><span class="string">"<span class="variable">$&#123;output&#125;</span>"</span><span class="string">'\"")&#125;'</span> <span class="variable">$&#123;data&#125;</span></span><br></pre></td></tr></table></figure><p>然后我们可以调用这个脚本，帮我们分割文本做输入输出。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># input_test.sh [command] [data-file] [output-file]</span></span><br><span class="line"></span><br><span class="line">$ ./input_test.sh <span class="string">"./plus.exe"</span></span><br><span class="line"><span class="comment"># 接收三个参数，要测试的命令，数据文件，输出文件，都有默认值</span></span><br><span class="line"><span class="comment"># ==&gt; 将自动分割 test_data.txt 中的文本块分别对 plus.exe 做输入，并把结果依次写入 stdout.txt 中</span></span><br></pre></td></tr></table></figure><p><a href="./input_test.sh">可从这里获取 <code>input_test.sh</code> 源文件</a>。</p><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><blockquote><ul><li><a href="http://www.cnblogs.com/dong008259/archive/2011/12/06/2277287.html" rel="external nofollow noopener noreferrer" target="_blank">linux之awk用法 | 东方雨中漫步者</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;
&lt;p&gt;大致是希望使用 awk 读取一个文本文件，通过空行把文本分割成多个文本块，依次把每个文本块输入到一个程序，并把结果依次输出到指定文件。&lt;/p&gt;
&lt;p&gt;先看
      
    
    </summary>
    
      <category term="编程艺术" scheme="http://wiki.maweizhuo.com/categories/%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF/"/>
    
      <category term="Linux" scheme="http://wiki.maweizhuo.com/categories/%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF/Linux/"/>
    
      <category term="Shell" scheme="http://wiki.maweizhuo.com/categories/%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF/Linux/Shell/"/>
    
    
      <category term="awk" scheme="http://wiki.maweizhuo.com/tags/awk/"/>
    
  </entry>
  
  <entry>
    <title>八大排序算法复杂度</title>
    <link href="http://wiki.maweizhuo.com/posts/%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
    <id>http://wiki.maweizhuo.com/posts/八大排序算法复杂度/</id>
    <published>2017-08-25T15:04:48.000Z</published>
    <updated>2017-11-21T07:41:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="排序算法时间空间复杂度表"><a class="header-anchor" href="#排序算法时间空间复杂度表"></a>排序算法时间空间复杂度表</h2><table><thead><tr><th style="text-align:center">排序方法</th><th style="text-align:center">平均时间</th><th style="text-align:center">最坏时间</th><th style="text-align:center">辅助空间</th><th style="text-align:center">稳定性</th></tr></thead><tbody><tr><td style="text-align:center">冒泡排序</td><td style="text-align:center">$O(n^2)$</td><td style="text-align:center">$O(n^2)$</td><td style="text-align:center">$O(1)$</td><td style="text-align:center">稳定</td></tr><tr><td style="text-align:center">简单选择排序</td><td style="text-align:center">$O(n^2)$</td><td style="text-align:center">$O(n^2)$</td><td style="text-align:center">$O(1)$</td><td style="text-align:center">稳定</td></tr><tr><td style="text-align:center">直接插入排序</td><td style="text-align:center">$O(n^2)$</td><td style="text-align:center">$O(n^2)$</td><td style="text-align:center">$O(1)$</td><td style="text-align:center">稳定</td></tr><tr><td style="text-align:center">希尔排序</td><td style="text-align:center">$O(n \log n)$</td><td style="text-align:center">$O(n^2)$</td><td style="text-align:center">$O(1)$</td><td style="text-align:center">不稳定</td></tr><tr><td style="text-align:center">堆排序</td><td style="text-align:center">$O(n \log n)$</td><td style="text-align:center">$O(n \log n)$</td><td style="text-align:center">$O(1)$</td><td style="text-align:center">不稳定</td></tr><tr><td style="text-align:center">并归排序</td><td style="text-align:center">$O(n \log n)$</td><td style="text-align:center">$O(n \log n)$</td><td style="text-align:center">$O(n)$</td><td style="text-align:center">稳定</td></tr><tr><td style="text-align:center">快速排序</td><td style="text-align:center">$O(n \log n)$</td><td style="text-align:center">$O(n^2)$</td><td style="text-align:center">$O(n \log n)$</td><td style="text-align:center">不稳定</td></tr><tr><td style="text-align:center">基数排序</td><td style="text-align:center">$O(d(n+r))$</td><td style="text-align:center">$O(d(n+r))$</td><td style="text-align:center">$O(n)$</td><td style="text-align:center">稳定</td></tr></tbody></table><p>注：基数排序中，d 为位数，r 为基数，n 为原数组个数。</p><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><blockquote><ul><li>大话数据结构 | 程杰</li><li><a href="https://www.toptal.com/developers/sorting-algorithms/" rel="external nofollow noopener noreferrer" target="_blank">Sorting Algorithms Animations</a></li><li><a href="https://zh.wikipedia.org/wiki/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F" rel="external nofollow noopener noreferrer" target="_blank">冒泡排序 | Wikipedia</a></li><li><a href="https://zh.wikipedia.org/wiki/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F" rel="external nofollow noopener noreferrer" target="_blank">选择排序 | Wikipedia</a></li><li><a href="https://zh.wikipedia.org/wiki/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F" rel="external nofollow noopener noreferrer" target="_blank">快速排序 | Wikipedia</a></li><li><a href="https://zh.wikipedia.org/wiki/%E5%A0%86%E6%8E%92%E5%BA%8F" rel="external nofollow noopener noreferrer" target="_blank">堆排序| Wikipedia</a></li><li><a href="https://zh.wikipedia.org/wiki/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F" rel="external nofollow noopener noreferrer" target="_blank">希尔排序 | Wikipedia</a></li><li><a href="https://zh.wikipedia.org/wiki/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F" rel="external nofollow noopener noreferrer" target="_blank">归并排序 | Wikipedia</a></li><li><a href="http://blog.csdn.net/21aspnet/article/details/7199579" rel="external nofollow noopener noreferrer" target="_blank">维基百科上的算法和数据结构链接很强大 | 21aspnet</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;排序算法时间空间复杂度表&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#排序算法时间空间复杂度表&quot;&gt;&lt;/a&gt;排序算法时间空间复杂度表&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;
      
    
    </summary>
    
      <category term="编程艺术" scheme="http://wiki.maweizhuo.com/categories/%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF/"/>
    
      <category term="算法" scheme="http://wiki.maweizhuo.com/categories/%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://wiki.maweizhuo.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
