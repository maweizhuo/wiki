{"pages":[{"title":"About","date":"2017-11-29T06:57:57.000Z","path":"about/index.html","text":"who are you ? weizhuo.ma 😉 我是谁,芸芸众生中微不足道的那一个。。。 职业生涯 两年百度工作经验,(恐怕是工作中的人生巅峰了 😂 ) 其他小厂年限若干。。。 工作内容 后端PHP开发 LNMP Go,Python (自学中) 向往的生活 喜欢平凡, 追逐自由, 向往旅行 希望未来的某一天能和自己喜欢的人来一场说走就走的旅行 小诗结尾 如果失去是苦 你还怕不怕付出 如果坠落是苦 你还要不要幸福 如果迷乱是苦 再开始还是结束 如果追求是苦 这是坚强还是执迷不悟"},{"title":"Categories","date":"2017-11-20T09:36:00.000Z","path":"categories/index.html","text":""},{"title":"Tags","date":"2017-11-20T09:36:00.000Z","path":"tags/index.html","text":""}],"posts":[{"title":"mysql常用汇总","date":"2017-11-22T08:53:30.000Z","path":"posts/mysql常用汇总/","text":"背景 mysql 日常使用中遇到的一些问题及总结 安装相关 创建mysql用户 新建用户，并具有远程登录的权限 grant all privileges on . to ‘langyage’@’%’ identified by ‘123456’ with grant option; 新建langyage用户并给他在所有主机登录的权限，用的密码是123456； GRANT Select ON *.* TO reader@&quot;%&quot; IDENTIFIED BY &quot;123456&quot;; 新建 reader 用户并给他在所有主机登录的权限，用的密码是123456； 删除user=’'的记录 delete from mysql.user where User=’’ 修改root密码 update mysql.user set password=PASSWORD(‘123456’) where User=‘root’; flush privileges; 导入导出数据库 导出 // mysql 导出远程数据库DF_Jubao complaint表数据 到db.sql文件中 mysqldump -h10.11.1.73 -uyangzi -P7550 -pd74u0oTw35 DF_Jubao complaint --skip-lock-tables &gt; /home/public/users/maweizhuo/www/db.sql mysqldump -h10.81.1.73 -uyangzi -P7550 -pd74u0oTw35 DF_Jubao complaint --where=“ucid=11142467” &gt; /home/public/users/maweizhuo/www/test.sql &gt; --skip-lock-tables // 跳过锁表，普通用户无锁表权限 &gt; --where=&quot;&quot; 导出某个条件下某个数据表到指定文件中 &gt; --default-character-set=utf8 导入 方法一： （1）选择数据库 mysql&gt;use abc; （2）设置数据库编码 mysql&gt;set names utf8; （3）导入数据（注意sql文件的路径） mysql&gt;source /home/abc/abc.sql; 方法二： mysql -u用户名 -p密码 数据库名 &lt; 数据库名.sql mysql -uabc_f -p abc &lt; abc.sql SQL相关 查询重复字段出现的次数 1select user_name,count(*) as count from user_table group by user_name having count&gt;1; 面试常问 为什么存储引擎 mysiam 查询比innodb 快 mysiam 和innodb ，mysiam检索快的原因是数据策略是b+树，在节点上指向物理位置的指针， 故快，而innodb是索引节点存的是主键id,所以要根据主键进行2次查找 数据库事务的四个特性及含义 数据库事务transanction正确执行的四个基本要素。 ACID,原子性(Atomicity)、一致性(Correspondence)、隔离性(Isolation)、持久性(Durability)。 原子性: 整个事务中的所有操作，要么全部完成，要么全部不完成，不可能停滞在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。 一致性: 在事务开始之前和事务结束以后，数据库的完整性约束没有被破坏。 隔离性: 隔离状态执行事务，使它们好像是系统在给定时间内执行的唯一操作。如果有两个事务，运行在相同的时间内，执行 相同的功能，事务的隔离性将确保每一事务在系统中认为只有该事务在使用系统。这种属性有时称为串行化，为了防止事务操作间的混淆，必须串行化或序列化请 求，使得在同一时间仅有一个请求用于同一数据。 持久性: 在事务完成以后，该事务所对数据库所作的更改便持久的保存在数据库之中，并不会被回滚。 引用 记录点滴，成为更好的自己。 — weizhuo.ma","tags":[{"name":"mysql","slug":"mysql","permalink":"http://wiki.maweizhuo.com/tags/mysql/"}],"categories":[{"name":"程序语言","slug":"程序语言","permalink":"http://wiki.maweizhuo.com/categories/程序语言/"},{"name":"MYSQL","slug":"程序语言/MYSQL","permalink":"http://wiki.maweizhuo.com/categories/程序语言/MYSQL/"}]},{"title":"linux命令汇总","date":"2017-11-22T06:55:30.000Z","path":"posts/linux常用命令汇总/","text":"背景 linux 环境是多数RD必须要用的一个环境,其中一些常见的命令,也必须会使用 常用汇总 递归创建目录 mkdir -p /home/dir1/dir2 查找文件名 find /路径 -iname ‘文件名*’ 查找内容 find /usr/ -type f |xargs grep 'bind-address’ 或 grep -r ‘bind-address’ /usr tar/unzip 命令解压到指定目录 tar zxvf elasticsearch-5.4.1.tar.gz -C/usr/local/ unzip test.zip -d /root/ 查看文件最新内容 tail -f /user/log.txt 引用 记录点滴，成为更好的自己。 — weizhuo.ma","tags":[{"name":"Linux","slug":"Linux","permalink":"http://wiki.maweizhuo.com/tags/Linux/"}],"categories":[{"name":"编程艺术","slug":"编程艺术","permalink":"http://wiki.maweizhuo.com/categories/编程艺术/"},{"name":"Linux","slug":"编程艺术/Linux","permalink":"http://wiki.maweizhuo.com/categories/编程艺术/Linux/"}]},{"title":"linux php 自带扩展编译安装","date":"2017-11-22T06:54:30.000Z","path":"posts/linux php 自带扩展编译安装/","text":"背景 php 安装自带或下载的扩展,需要编译安装 步骤 进入到PHP 源码扩展目录 cd software/tar/php-7.0.2/ext/ 进入需要安装的扩展目录比如 exif cd exif 执行phpize （ 编译前准备） /usr/local/php/bin/phpize 配置，并指向PHP配置文件位置 ./configure --with-php-config=/usr/local/php/bin/php-config make 会在当前modules目录下生成exif.so make install 会把exif.so复制到 /usr/local/php/lib/php/extensions/no-debug-non-zts-20151012/ 编辑php.ini extension = exif.so 重启服务 重启php-fpm 或Apache看phpinfo会有对应扩展 引用 记录点滴，成为更好的自己。 — weizhuo.ma","tags":[{"name":"php","slug":"php","permalink":"http://wiki.maweizhuo.com/tags/php/"}],"categories":[{"name":"程序语言","slug":"程序语言","permalink":"http://wiki.maweizhuo.com/categories/程序语言/"},{"name":"PHP","slug":"程序语言/PHP","permalink":"http://wiki.maweizhuo.com/categories/程序语言/PHP/"}]},{"title":"laravel相关","date":"2017-11-22T06:53:30.000Z","path":"posts/laravel相关/","text":"背景 laravel 日常使用中遇到的一些问题及总结 问题汇总 框架安装完需要做的事情 .env 文件创建,修改里面的配置 chmod -R 777 storage/ 如何去掉notice错误,undefined index .. 提示 当你修改php.ini 里的error_reporting 后会发现,laravel 还是会报错,因为laravel 底层对 php.ini 里的变量进行重写了。 修改地址:vendor/laravel/framework/src/Illuminate/Foundation/Bootstrap/HandleExceptions.php 修改 error_reporting(E_ALL &amp; ~E_NOTICE) session问题 现象： 登录接口 session::put(‘user_id’,1) 退出接口 session::forget(‘user_id’); 用户信息 查询 session::get(‘user_id’)，还有数据，不正常。 解决办法： 在退出接口里session::forget 或put空数据之后 再加上一行代码 session::save()即可 如何添加异常提示 位置:代码文件位置在app/Exceptions/Handler.php 1234567891011public function render($request, Exception $exception)&#123; if ($this-&gt;isHttpException($exception)) &#123; return parent::render($request, $exception); &#125;else&#123; return response()-&gt;json([ 'code'=&gt;$exception-&gt;getCode(), 'msg'=&gt;$exception-&gt;getMessage(), ] ); &#125;&#125; ubuntu 安装完之后composor 报错 现象: 通过composer安装laravel框架过程中将需要调用ext-dom，若xml扩展未安装，这也会影响我们安装laravel。 以上两个扩展是PHP7版本安装laravel所依赖也是容易被忽略的扩展， 当你安装laravel无法正常生成vendor目录时就需要检查mbstring扩展加载情况了。 解决 安装也是简单的： apt-get install php7.0-mbstring 若提示：phpunit/phpunit 5.0.x requires ext-dom * -&gt; the requested PHP extension dom is missing from your system. 则需要安装xml扩展。 apt-get install php7.0-xml group by 用法 1234ReviewMark::whereIn('package_id', $review_pid) -&gt;where('is_cancel', 1) -&gt;where(\"l4_answers\", \"!=\", '')-&gt;select(\\DB::raw('package_id,count(1) as num')) -&gt;groupBy('package_id')-&gt;get()-&gt;toArray(); laravel 定时任务不执行的问题 laravel 定时任务设置不重复执行的话会生成一个加密文件，当完成这个任务时候，会删掉这个文件。 如果不删掉的话这个任务会一直不执行。 kernel.php 里 command 里面名称的方法命名，如果包含下划线也不执行，如commad(‘m_r_diff:sync’) composer 安装 curl -sS https://getcomposer.org/installer | /data/soft/php-fpm_9000/bin/php sudo mv composer.phar /usr/local/bin/composer job 的使用 生成文件 在app目录下job 目录生成队列任务 php artisan make:job SendReminderEmail 添加到队列 a. 默认 queue::push(new SendReminderEmail()); b. 指定队列名 queue::pushOn(‘queue_name’,new SendReminderEmail()); 执行队列 a. php artisan queue:work/listen 执行/监听 b. 指定执行某个队列名 --queue参数指定 php artisan queue:work --queue='queue_name' --tries=3 --sleep=2 邮箱配置 123456MAIL_DRIVER=smtpMAIL_HOST=smtp.163.comMAIL_PORT=465MAIL_USERNAME=maweizhuo1314@163.comMAIL_PASSWORD=yourpasswordMAIL_ENCRYPTION=ssl 发送邮件乱码 1$message-&gt;attach($attachment,['as'=&gt;\"=?UTF-8?B?\".base64_encode($this-&gt;pad_filename).\"?=.doc\"]); 安装laravel a. 创建 composer create-project laravel/laravel=5.1.* --prefer-dist b. 采用国内的包管理 composer config -g repositories.packagist composer http://packagist.phpcomposer.com c. 全局配置 composer config -g secure-http false 框架安装redis 引入包 注: 需要引入的包可访问 package国内镜像官网 各种引入包下载地址 修改 项目Conposer.json文件 删除Conposer.lock 执行composer clearcache 执行composer update 执行：composer require predis/predis 框架优缺点 优点 缺点 核心ioc容器 臃肿 依赖注入思想 写一个服务默认会引入多个类 中间件 慢 composer 包管理 资源消耗大 定时脚本开发 引用 记录点滴，成为更好的自己。 — weizhuo.ma","tags":[{"name":"laravel","slug":"laravel","permalink":"http://wiki.maweizhuo.com/tags/laravel/"},{"name":"php","slug":"php","permalink":"http://wiki.maweizhuo.com/tags/php/"}],"categories":[{"name":"程序语言","slug":"程序语言","permalink":"http://wiki.maweizhuo.com/categories/程序语言/"},{"name":"PHP","slug":"程序语言/PHP","permalink":"http://wiki.maweizhuo.com/categories/程序语言/PHP/"}]},{"title":"mac 工具软件","date":"2017-11-22T06:51:30.000Z","path":"posts/mac工具软件/","text":"mac 常用工具下载地址汇总 securecrt charles 抓包工具 phpstorm 网盘地址 密码:iueh 安装参考地址 数据库管理工具 sequelpro postman 和 navicat 在我的百度云网盘 引用 记录点滴，成为更好的自己。 — weizhuo.ma","tags":[{"name":"tool","slug":"tool","permalink":"http://wiki.maweizhuo.com/tags/tool/"}],"categories":[{"name":"工具软件","slug":"工具软件","permalink":"http://wiki.maweizhuo.com/categories/工具软件/"},{"name":"Mac","slug":"工具软件/Mac","permalink":"http://wiki.maweizhuo.com/categories/工具软件/Mac/"}]},{"title":"Git 常用命令","date":"2017-11-22T01:51:30.000Z","path":"posts/Git 常用命令/","text":"git clone 克隆一个版本仓库命令 常用参数还有 git clone url --depth=1 (加上这个参数可以避免项目太大，下载失败； –depth=1 是指只拉取最后一次的提交结果。); git clone url new_name 生成裸仓库文件 进入git源目录 , 生成无版本控制的新文件 git archive -o latest.zip HEAD 基于最新提交建立归档文件latest.zip git init 123456git init 初始化 git branch branch_name git branch -D branch_name 删除分支 git checkout -b branch_name 新建并切换为这个分支 git pull origin master 更新 = git fetch (拉取远程代码不 自动合并) + git merge git merge 12345678// 从主干合并分支代码1. 切换到master git checkout master2. 合并代码到主干 git merge --no-ff develop --no-ff 保留该版本提交的log3. 推送到远程 git push git push 12345678git add . git rm a.txt // 删除文件 git commit -m &apos;备注&apos; git push origin master git push origin develop （develop为远程分支名） git log git status git reset 12345678// 冲突之后 ,以下命令回退还原git reset --hard HEAD^ // 最新的一次提交git checkout 文件路径git revert 冲突放弃本地修改 的改法git reset --hardgit pull git tag 123456789git标签使用-- 新建tag v1.0 git tag -a v1.0 -m &apos;v1.0 release&apos;-- 推送tag v1.0 到远程库 git push origin v1.0-- 删除本地taggit tag -d v1.0-- 删除远程taggit push origin --delete v1.0 引用 记录点滴，成为更好的自己。 — weizhuo.ma","tags":[{"name":"Git","slug":"Git","permalink":"http://wiki.maweizhuo.com/tags/Git/"}],"categories":[{"name":"编程艺术","slug":"编程艺术","permalink":"http://wiki.maweizhuo.com/categories/编程艺术/"},{"name":"Git","slug":"编程艺术/Git","permalink":"http://wiki.maweizhuo.com/categories/编程艺术/Git/"}]},{"title":"Git 清理已追踪或未添加追踪的文件","date":"2017-11-21T01:51:30.000Z","path":"posts/Git 清理已追踪或未添加追踪的文件/","text":"git add 将文件及其修改添加到 Git 索引和追踪当中，也就是将文件快照放入暂存区当中，但我们有时候想要丢弃本次修改过并添加到暂存区的内容，或者需要删除未被追踪的文件。 git checkout git checkout 是把文件从暂存区中恢复到工作区，也就是说源文件如果被修改，再使用 git add 添加到暂存区了，git checkout 无法把他再恢复到源文件，只能恢复到暂存时的状态。 git reset git reset 可以用来重置工作区和暂存区还能更改 HEAD 指向，可以达到我们的丢弃本次修改到暂存区的目的。 1234# Usage: git reset [&lt;mode&gt;] [&lt;commit&gt;]# eg: git reset --mixed HEAD$ git reset HEAD$ git checkout . 首先使用 git reset HEAD 把暂存区重置到本次提交，再用 checkout 恢复文件到暂存区的状态，但我们暂存区已经重置了，所以实际 checkout 恢复到的是本次提交时的初始状态了。 git reset 有五种模式，不写明模式参数时，默认为 --mixed，几种模式间主要的差异在于重置的区域不同，这里总结下其异同：（表中不写的位置代表无操作） 重置工作区 重置暂存区 将 HEAD 指向指定 commit –hard √ √ √ –soft √ –mixed √ √ –merge 暂存区有文件则重置失败 √ –keep 暂存区有文件则重置失败 √ 所以刚才上面两行命令， reset 后再 checkou ，可以用 --hard 代替： 1git reset --hard HEAD git clean 顺便一提，git reset --hard 是直接重置整个工作区，所以也会把未被添加追踪的新文件也删除了；但 git checkout 是恢复，所以不会影响未添加追踪的新文件。 git clean 就是用来删除未被添加追踪的文件和文件夹的。 1234git clean -n # 将显示哪些未被追踪的文件和文件夹可以清理git clean -d # 清理未被追踪的文件夹git clean -f # 清理未被追踪的文件git clean -df # 清理未被追踪的文件和文件夹 参考资料 git reset简介 Git 工作区、暂存区和版本库 git 删除已经 add 的文件","tags":[{"name":"Git","slug":"Git","permalink":"http://wiki.maweizhuo.com/tags/Git/"}],"categories":[{"name":"编程艺术","slug":"编程艺术","permalink":"http://wiki.maweizhuo.com/categories/编程艺术/"},{"name":"Git","slug":"编程艺术/Git","permalink":"http://wiki.maweizhuo.com/categories/编程艺术/Git/"}]},{"title":"hexo安装使用","date":"2017-09-25T15:04:48.000Z","path":"posts/hexo安装使用/","text":"安装 首先需要安装node.js 和npm npm install hexo --no-optional （此参数局部安装） -g(全局安装，之后运行服务会起不来端口可能) 创建一个网站目录 &amp;&amp; 进入该目录 初始化 hexo init 安装 npm install 启动服务 hexo server 新建文章 hexo new &quot;我的第一篇文章&quot; 然后会显示生产的文件地址，进行编辑 主题配置 git clone git@github.com:litten/hexo-theme-yilia.git themes/yilia 修改 _config.yml(注意：冒号后面要空一格，否则会执行页面报错) theme: yilia 生效配置(常用的命令) hexo clean hexo g (generate) hexo s (server) 启动服务 安装git提交代码 扩展 npm install hexo-deployer-git --save 发布 hexo d (deploy) 常见问题 readme.md文件 会被解析成HTML 解决: 在根目录下_config.yml 里 12skip_render: - README.md 每次编译ico或images会丢掉 解决: 在source目录下放这些源文件,而不是在public目录下放,因为public目录是 hexo g 之后生成的。","tags":[{"name":"hexo","slug":"hexo","permalink":"http://wiki.maweizhuo.com/tags/hexo/"}],"categories":[{"name":"编程艺术","slug":"编程艺术","permalink":"http://wiki.maweizhuo.com/categories/编程艺术/"},{"name":"个人web","slug":"编程艺术/个人web","permalink":"http://wiki.maweizhuo.com/categories/编程艺术/个人web/"}]},{"title":"点滴人生观念信条","date":"2017-09-20T12:28:21.000Z","path":"posts/点滴人生观念信条/","text":"学习生活观念，提高生活质量，拒绝直男癌 优胜劣汰，直男癌去死。 消费观念：什么层次的人用什么层次的货 不要越界追求高端，并不能达到炫耀的目的；也不要刻意低廉、过分节俭，一味去省钱，反而失去更多。 钱是赚出来的，不是省出来的，赚出来的的钱 “是为了实现一定目标的等价物”。 参见 马斯洛需求层次理论 、曹将 | 从他们分手说起。 抱目的做事而不是抱期望做事 不要报期望。 任何期望都有实现的可能，但也有落空后的失望，意志不坚的人容易被失望左右，最好是不要抱着任何好的坏的期望，而是抱着某种目的做事，想着要达成目的应该要做什么，通过目的驱动行为，通过目的驱动解决问题。 遇到问题、事件努力解决 不要想着不劳而获，也不要想着该别人做，他不做我去做就吃亏。 如果于自身利益相关，应该自我主动推动事情发展、解决问题，而不是别人不做我也不做，不要吝啬一丝力气。 遭遇灾难不要放弃，人活着就有希望 不到最后已经结束就不要放弃。 人生和生活都是需要活着才能实现，记录人生信条就是因为认为这些信条能帮助人活的更好。 考虑最坏的打算，提前做好危机准备 防人之心不可无，但不等于被害妄想症。保护自己是必要的，人不能有恃无恐。 待人和气从哪个方便来说对人对己都有好处，但是和气不等于软弱退让，而是占理但不逼迫强硬。 参考资料 马斯洛需求层次理论 曹将 | 从他们分手说起 雷斯林 | “我可以骚，你不能扰”是最没意义的口号 雷斯林 | 法律对不怕死的人无解，所以待人和气一点其实对自己也有好处 | 微信","tags":[{"name":"观念信条","slug":"观念信条","permalink":"http://wiki.maweizhuo.com/tags/观念信条/"}],"categories":[{"name":"生活闲读","slug":"生活闲读","permalink":"http://wiki.maweizhuo.com/categories/生活闲读/"}]},{"title":"CSS属性声明顺序规范","date":"2017-08-27T15:04:48.000Z","path":"posts/CSS属性声明顺序规范/","text":"CSS 属性声明顺序规范 很多 CSS 规范的属性顺序都各不一样，这东西也不像 Vue 组件属性顺序 一样有官方规范，这里记录下我目前认为合适的一种顺序。 属性分类顺序 显示方法 &amp; 布局 定位 盒模型框 外边距 边框 内边距 尺寸 文本样式 字体 文本 文字颜色 背景 轮廓 透明度 &amp; 阴影 动效 过渡 转换变形 动画 其他 伪类 &amp; 伪元素 引用 媒体查询 属性顺序列表 源自 AlloyTeam CSS Code Guide 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177[ [ \"display\", \"visibility\", \"float\", \"clear\", \"overflow\", \"overflow-x\", \"overflow-y\", \"clip\", \"zoom\" ], [ \"table-layout\", \"empty-cells\", \"caption-side\", \"border-spacing\", \"border-collapse\", \"list-style\", \"list-style-position\", \"list-style-type\", \"list-style-image\" ], [ \"position\", \"top\", \"right\", \"bottom\", \"left\", \"z-index\" ], [ \"margin\", \"margin-top\", \"margin-right\", \"margin-bottom\", \"margin-left\", \"box-sizing\", \"border\", \"border-width\", \"border-style\", \"border-color\", \"border-top\", \"border-top-width\", \"border-top-style\", \"border-top-color\", \"border-right\", \"border-right-width\", \"border-right-style\", \"border-right-color\", \"border-bottom\", \"border-bottom-width\", \"border-bottom-style\", \"border-bottom-color\", \"border-left\", \"border-left-width\", \"border-left-style\", \"border-left-color\", \"border-radius\", \"border-top-left-radius\", \"border-top-right-radius\", \"border-bottom-right-radius\", \"border-bottom-left-radius\", \"border-image\", \"border-image-source\", \"border-image-slice\", \"border-image-width\", \"border-image-outset\", \"border-image-repeat\", \"padding\", \"padding-top\", \"padding-right\", \"padding-bottom\", \"padding-left\", \"width\", \"min-width\", \"max-width\", \"height\", \"min-height\", \"max-height\" ], [ \"font\", \"font-family\", \"font-size\", \"font-weight\", \"font-style\", \"font-variant\", \"font-size-adjust\", \"font-stretch\", \"font-effect\", \"font-emphasize\", \"font-emphasize-position\", \"font-emphasize-style\", \"font-smooth\", \"line-height\", \"text-align\", \"text-align-last\", \"vertical-align\", \"white-space\", \"text-decoration\", \"text-emphasis\", \"text-emphasis-color\", \"text-emphasis-style\", \"text-emphasis-position\", \"text-indent\", \"text-justify\", \"letter-spacing\", \"word-spacing\", \"text-outline\", \"text-transform\", \"text-wrap\", \"text-overflow\", \"text-overflow-ellipsis\", \"text-overflow-mode\", \"word-wrap\", \"word-break\" ], [ \"color\", \"background\", \"background-color\", \"background-image\", \"background-repeat\", \"background-attachment\", \"background-position\", \"background-position-x\", \"background-position-y\", \"background-clip\", \"background-origin\", \"background-size\" ], [ \"outline\", \"outline-width\", \"outline-style\", \"outline-color\", \"outline-offset\", \"opacity\", \"box-shadow\", \"text-shadow\" ], [ \"transition\", \"transition-delay\", \"transition-timing-function\", \"transition-duration\", \"transition-property\", \"transform\", \"transform-origin\", \"animation\", \"animation-name\", \"animation-duration\", \"animation-play-state\", \"animation-timing-function\", \"animation-delay\", \"animation-iteration-count\", \"animation-direction\" ], [ \"content\", \"quotes\", \"counter-reset\", \"counter-increment\", \"resize\", \"cursor\", \"user-select\", \"nav-index\", \"nav-up\", \"nav-right\", \"nav-down\", \"nav-left\", \"tab-size\", \"hyphens\", \"pointer-events\" ]] 参考链接 Code Guide by @mdo RECESS | property order Code Guide by @AlloyTeam","tags":[{"name":"CSS","slug":"CSS","permalink":"http://wiki.maweizhuo.com/tags/CSS/"}],"categories":[{"name":"程序语言","slug":"程序语言","permalink":"http://wiki.maweizhuo.com/categories/程序语言/"},{"name":"CSS","slug":"程序语言/CSS","permalink":"http://wiki.maweizhuo.com/categories/程序语言/CSS/"}]},{"title":"IaaS, PaaS, SaaS 概念","date":"2017-08-25T15:04:48.000Z","path":"posts/IaaS, PaaS, SaaS 概念/","text":"云服务通常将其提供的服务自下而上分成三层：基础设施(infrastructure)、平台(platform)和软件(software)。 IaaS Infrastructure-as-a-Service(基础设施即服务) 第一层叫做 IaaS，有时候也叫做 Hardware-as-a-Service，如果你想在办公室或者公司的网站上运行一些应用（比如自己开发好的 APP 或是网络游戏，你需要去买服务器，成本太高了。 但是现在有IaaS，你可以将硬件外包给这些专业的公司，这些公司会提供场外服务器，存储和网络硬件，你花钱租用就行。 这样就节省了维护成本和办公场地，并且你可以在任何时候利用这些硬件来运行其应用。 PaaS Platform-as-a-Service（平台即服务） 第二层就是 PaaS，某些时候也叫做中间件。PaaS 是面向软件开发者的服务，云计算平台提供硬件，OS， 编程语言，开发库，部署工具， 帮助软件开发者更快的开发软件服务。 云服务商将软件开发的云端开发平台和软件运营的云端运行环境（包括中间件、数据库、we b服务、消息总线等基础通用服务）作为一种服务，提供给最终用户。 换句话说，这些 PaaS 服务商提供的都是基础开发服务平台，主要目的就是让你把精力专注在应用层面的开发上面，而不需要浪费在这些基础重复性的事情上，也不用担心开发完成后部署问题。 SaaS Software-as-a-Service（软件即服务） 简单说就是人家把你想要的功能开发好成应用软件，然后直接卖账号给你用，你也不需要担心服务器、带宽、应用开发等问题，直接交钱使用就行。 不再面向开发，而是直接面向企业或普通用户，企业改改 logo，直接给用户使用。 参考资料 IaaS PaaS和SaaS公司的作用 | 盐漂浮草 谁能举个通俗易懂的例子告诉我IAAS，SAAS，PAAS的区别？ | 东坪子的回答 谁能举个通俗易懂的例子告诉我IAAS，SAAS，PAAS的区别？ | 何足道的回答","tags":[{"name":"云服务","slug":"云服务","permalink":"http://wiki.maweizhuo.com/tags/云服务/"}],"categories":[{"name":"编程艺术","slug":"编程艺术","permalink":"http://wiki.maweizhuo.com/categories/编程艺术/"},{"name":"架构","slug":"编程艺术/架构","permalink":"http://wiki.maweizhuo.com/categories/编程艺术/架构/"}]},{"title":"awk 管道操作小结","date":"2017-08-25T15:04:48.000Z","path":"posts/awk 管道操作小结/","text":"背景 大致是希望使用 awk 读取一个文本文件，通过空行把文本分割成多个文本块，依次把每个文本块输入到一个程序，并把结果依次输出到指定文件。 先看文件结构： 12$ lsplus.sh data.txt 其中， plus.sh 文件内容如下： 12345#!/bin/shIFS=\" \"read a b((c=a+b)) echo $&#123;c&#125; 代码含义是从标准输入读入两个数， a 、b，返回 a+b 的结果。 123$ ./plus.sh2 3 # &lt;-- its my input5 # --&gt; its result data.txt 中的数据如下： 12345670 3030 4040 8080 100 目标是使用 awk 从 data.txt 中读入 4 组数据，分别输入到 plus.sh 中，返回 4 个结果值，并依次输入到 output.txt 中。预期结果 output.txt 如下： 12343070120180 经过 一开始，简单的思路是，awk 使用空行分割文本文件，把每组文本块通过管道输入到调用的 plus.sh 中，再把每组的结果通过重定向追加到 output.txt 文件中。 根据思路于是写出如下代码： 1$ awk -v RS=\"\" '&#123;print | \"./plus.sh &gt;&gt; output.txt\"&#125;' data.txt 然而一看结果，只有第一个分段中求出来的值； 12345$ lsplus.sh data.txt output.txt$ cat output.txt30 经过调试和单独输出，发现分段也没问题，单独 print 也是分段的没问题，于是大概猜测问题出在重定向上，除了第一个值以外的其他结果并没有被重定向到文件（此处只是当时猜测，其实不对，请看下文分析）； 通过查阅 「awk 使用管道输出到 shell 中」 的相关资料，找到问题答案： 如果在 awk 程序中打开了管道，必须先关闭该管道才能打开另一个管道。也就是说一次只能打开一个管道。 shell 命令必须被双引号引用起来。 如果打算再次在 awk 程序中使用某个文件或管道进行读写，则可能要先关闭程序，因为其中的管道会保持打开状态直至脚本运行结束。注意，管道一旦被打开，就会保持打开状态直至 awk 退出。 对于 awk output | shell input 来说，shell 接收 awk 的输出，并进行处理。需要注意的是，awk 的 output 是先缓存在 pipe 中，等输出完毕后再调用 shell 命令 处理，shell 命令只处理一次，而且处理的时机是 「awk程序结束时，或者管道关闭时（需要显式的关闭管道）」 对于刚才的问题，简单的解释就是因为管道缓存，print 的所有输出被堆到一起只传了一次给 plus.sh，而且这一次相当于传了整个文件，但 plus.sh 在读了两个数计算完后就退出了，后面的所有数都没用上，由于 plus.sh 只计算了一次，因此结果也只有一个。（并非上面猜测的结果未被重定向） 解决尝试 最初的解决尝试是使用 awk 中的 close 命令关闭文件管道，于是写出如下命令： 1$ awk -v RS=\"\" '&#123;print | \"./plus.sh &gt;&gt; output.txt\"; close(\"output.txt\")&#125;' data.txt 结果依然只有一个值。。。 继续查阅资料才知道，close 关闭时需要输入的是管道描述符，而非只是文件名，而管道描述符是包含对管道调用的整个命令在内的 shell 命令字符串，也就是说，应该是 close(&quot;./plus.sh &gt;&gt; output.txt&quot;) 。 再次尝试代码修改如下： 1234567$ awk -v RS=\"\" '&#123;print | \"./plus.sh &gt;&gt; output.txt\"; close(\"./plus.sh &gt;&gt; output.txt\")&#125;' data.txt$ cat output.txt3070120180 OK，解决问题，这句代码就是能用的了。 总结 总结下刚刚踩的坑，再做些优化； awk 中先关闭该管道才能打开另一个管道； awk output | shell input 时，awk 输出缓存到管道中，只有 awk 程序结束时，或者管道关闭时，才把缓存中的所有输出交由 shell 处理； 管道描述符是调用管道的整个 shell 命令字符串；（如在 print | &quot;./plus.sh &gt;&gt; output.txt&quot;; 中就是 &quot;./plus.sh &gt;&gt; output.txt&quot;） awk 语句中使用 shell 变量 &quot;'$var'&quot; 的形式 12var=\"test\"awk 'BEGIN&#123;print \"'$var'\"&#125;' 变量中有空格时使用 &quot;'&quot;$var&quot;'&quot; 12var=\"this is a test\" awk 'BEGIN&#123;print \"'\"$var\"'\"&#125;' 变量中有空格，并且变量当作 shell 命令执行时，使用 &quot;\\&quot;'&quot;${var}&quot;'\\&quot;&quot; 形式 12cmd=\"./plus a and b.sh\"awk 'BEGIN&#123;print | \"\\\"'\"$&#123;cmd&#125;\"'\\\"\"&#125;' 再把上面 awk 语句写入到一个脚本中，方便调用： input_test.sh 123456#!/bin/shcmd=\"$&#123;1:-\"./main.sh\"&#125;\"data=\"$&#123;2:-\"test_data.txt\"&#125;\"output=\"$&#123;3:-\"stdout.txt\"&#125;\"awk -v RS=\"\" '&#123;print $n | \"\\\"'\"$&#123;cmd&#125;\"'\\\" &gt;&gt; \\\"'\"$&#123;output&#125;\"'\\\"\";close(\"\\\"'\"$&#123;cmd&#125;\"'\\\" &gt;&gt; \\\"'\"$&#123;output&#125;\"'\\\"\")&#125;' $&#123;data&#125; 然后我们可以调用这个脚本，帮我们分割文本做输入输出。 12345# input_test.sh [command] [data-file] [output-file]$ ./input_test.sh \"./plus.exe\"# 接收三个参数，要测试的命令，数据文件，输出文件，都有默认值# ==&gt; 将自动分割 test_data.txt 中的文本块分别对 plus.exe 做输入，并把结果依次写入 stdout.txt 中 可从这里获取 input_test.sh 源文件。 参考资料 linux之awk用法 | 东方雨中漫步者","tags":[{"name":"awk","slug":"awk","permalink":"http://wiki.maweizhuo.com/tags/awk/"}],"categories":[{"name":"编程艺术","slug":"编程艺术","permalink":"http://wiki.maweizhuo.com/categories/编程艺术/"},{"name":"Linux","slug":"编程艺术/Linux","permalink":"http://wiki.maweizhuo.com/categories/编程艺术/Linux/"},{"name":"Shell","slug":"编程艺术/Linux/Shell","permalink":"http://wiki.maweizhuo.com/categories/编程艺术/Linux/Shell/"}]},{"title":"八大排序算法复杂度","date":"2017-08-25T15:04:48.000Z","path":"posts/八大排序算法复杂度/","text":"排序算法时间空间复杂度表 排序方法 平均时间 最坏时间 辅助空间 稳定性 冒泡排序 $O(n^2)$ $O(n^2)$ $O(1)$ 稳定 简单选择排序 $O(n^2)$ $O(n^2)$ $O(1)$ 稳定 直接插入排序 $O(n^2)$ $O(n^2)$ $O(1)$ 稳定 希尔排序 $O(n \\log n)$ $O(n^2)$ $O(1)$ 不稳定 堆排序 $O(n \\log n)$ $O(n \\log n)$ $O(1)$ 不稳定 并归排序 $O(n \\log n)$ $O(n \\log n)$ $O(n)$ 稳定 快速排序 $O(n \\log n)$ $O(n^2)$ $O(n \\log n)$ 不稳定 基数排序 $O(d(n+r))$ $O(d(n+r))$ $O(n)$ 稳定 注：基数排序中，d 为位数，r 为基数，n 为原数组个数。 参考资料 大话数据结构 | 程杰 Sorting Algorithms Animations 冒泡排序 | Wikipedia 选择排序 | Wikipedia 快速排序 | Wikipedia 堆排序| Wikipedia 希尔排序 | Wikipedia 归并排序 | Wikipedia 维基百科上的算法和数据结构链接很强大 | 21aspnet","tags":[{"name":"算法","slug":"算法","permalink":"http://wiki.maweizhuo.com/tags/算法/"}],"categories":[{"name":"编程艺术","slug":"编程艺术","permalink":"http://wiki.maweizhuo.com/categories/编程艺术/"},{"name":"算法","slug":"编程艺术/算法","permalink":"http://wiki.maweizhuo.com/categories/编程艺术/算法/"}]},{"title":"maweizhuo wiki site desc","date":"2017-08-25T15:04:48.000Z","path":"posts/maweizhuo wiki site desc/","text":"我的个人wiki 😊 😊。 O(∩_∩)O哈哈~ 背景 没有 wiki 的时候,自己对知识的储备流程大概如下 干脆不记录,需要时候百度下 😂 记在一个本上,方式古老了点 写博客,但相对零散,不直观 存在云笔记里,如 有道云 在使用中，笔记系统 主大块信息的分类和整理，Wiki 主零碎知识的积累，而 博客 只在于 精。 用途 希望在以后的工作生活中,wiki可以作为自己的一个工具,记录自己生活中的点滴。促进自己成长。 其他链接 github blog 我的主页 引用 记录点滴，成为更好的自己。 — weizhuo.ma Hosted by Coding Pages","tags":[],"categories":[]},{"title":"DISC 行为风格理论","date":"2017-08-16T04:56:24.000Z","path":"posts/DISC-行为风格理论/","text":"什么是 DISC DISC 是一种行为风格理论，它将人的行为通过四个维度来解释。现代 DISC 是由美国心理学家威廉·莫尔顿·马斯顿博士（Dr. William Moulton Marston）在二十世纪二十年代提出的理论基础发展和延伸来的。DISC 四个字母各表示一个维度，其具体解释各家略有差别。四个属性简单概括如下： D : Dominance / Director , 老板型 / 指挥者，表现为目标明确、执行力强。 I : Influence / Interact , 互动型 / 社交者，表现为热爱分享、性格活泼。 S : Steadiness / Supporter , 支持型 / 支持者，表现为对人依赖和迁就。 C : Corrector / Compliance , 修正型 / 思考者，现为标准清晰、追求卓越。 DISC 是对人行为、情绪、性格的归纳，既可以说某人是 D 类型的性格，也可以说某人这个行为偏 D 属性。每个人都有 DISC 方面的四个属性，只是偏向性不同，是行为风格的一种特点，每种熟悉之间没有好坏之分，并且可以易于通过训练改变偏向的属性特质。 DISC 理论中既包括每个属性都有哪些特质，也包括每种属性的人心里对人对事的期望，和如何正确对各种属性的人打交道。 DISC 有什么作用 因为 DISC 跟人性格的强相关性，最常见的使用就是通过 DISC 理论分析周围人的性格属性，采用适用的沟通方式减少交流障碍与矛盾；很多时候你在人群中不受欢迎，是因为没有采取对味的谈话方式给不同 DISC 属性的人。 延伸上讲，DISC 覆盖的范围就很广了； 与人力资源挂钩，企业管理通过了解职员的特性，进而分配合适的任务，放对人才位置提升人力效率； 与自我分析挂钩，细致分析自我的 DISC 属性偏向再回顾过去，能很容易解释以往做错事的原因，这时总结自己 DISC 属性方面的缺失，能够预测自己在遇到某类问题时容易犯什么错，针对性的训练自己某个缺失的属性，完善和规整自身行为。 与演讲演示挂钩，通过 DISC 分析现场观众成分，调整演讲者说话内容的属性，帮助调动现场氛围，更吸引人。 与对话谈判挂钩，分析对手缺失的属性，判断对手到底是吃哪套的人，直击谈判痛点，反转局势。 与人生规划挂钩，了解自己，才能给自己规划合适的方向，不断调整、学习和发展。 DISC 的应用非常之多，是涵盖社区交往多数场合的常用技能。 如何分析人的 DISC 属性 上面有简单介绍 DISC 属性的特质，这里也先放上一张总结性的属性表。 企业中常用的识别方式是通过让职员使用网页或软件做 DISC 测评，通过软件分析得出员工属性偏向； 日常生活中肯定是没办法让你身边的每个人都做一套测评题的，但是我们也可以通过观察他人的言行，说话风格做事风格，来简单分析某个人处于这个场景中更偏向哪种属性。相处方法符合“同性相吸”，即他是什么特质的人，你就按那个特质的行为方式来回应他，一般都会让他满意，两方相处都舒服。 D 属性 属性特质： 关注事情发展 能力强，态度偏强势，自主积极推动事情 目标坚定，认定的事情不容易改 喜欢定计划，追求办事效率 做事不留情面（不会照顾感情） 常见于老板领导特质 沟通要点： 第一，计划性要强 第二，避免正面争论 第三，汇报要点 第四，如果做错了，及时承认 考虑使用“三点汇报法” 最重要的是什么 最紧急的是什么 列完整清单 I 属性 属性特质： 关注人的情绪变化 喜欢与人交谈而不是刻板做事 社交主动，乐于分享 喜欢听故事讲故事，善于描述细节，喜欢夸张性的形容词 回应人热情、积极及时 常见于社交达人特质 沟通要点： 第一，热情回应 第二，告诉他“你有趣” 第三，多用具体的人和事来表达 第四，多表达感受 第五，不要跟他们谈“人不为己天诛地灭” S 属性 属性特质： 随和，中庸，没有棱角 比较关注人的行为 喜欢在后面支持帮助他人，不善于正面出风头 服从安排 喜欢和平，害怕冲突矛盾 话不多说，做事稳健，不会急躁，谨言慎行 长久保持一致，固有原则，不喜欢改变 沟通要点： 第一，多说一两句温暖和肯定的话 第二，多一些关怀和包容 第三，多一些指导给出规划 C 属性 属性特质： 关注事情方向的把控 喜欢标准化，善于分析规则 总跟他人摆事实讲道理 先思考后做事情 喜欢简洁（外观和流程） 喜欢定计划，按步就搬，也要求别人要守规矩 追求完美卓越，对人对事要求高 情感内敛，有话直说，按规矩办事而不受感情影响 表情严肃，给人一定不易接近的距离感 沟通要点： 第一，用数据和事实说话 第二，保持距离，不用套近乎 第三，让他们先发言 第四，有话直说但一定要符合逻辑 场景举例 D 属性 这个项目已经进展到核心环节，目前最重要的是做尽职调查，完善财务数据；（最重要的是什么） 当前最紧急的事是跟对方领导沟通，安排一次碰头会；（最紧急的是什么） 其他相关的进度在这张表上，我马上发送到您的邮箱，有任何问题可以随时联系我。（完整清单） I 属性 I：“我发现有个新的APP，真的超有用，你看看……” “恩，真的哎！我马上去下！”（及时热情反馈） S 属性 “我记得琶醍有家餐馆不错，晚上一起去吃吧，不要说拒绝哦！”（有安排，并表现照顾） C 属性 直接陈述道理和事实即可。 参考资料 李海峰说DISC 李海峰：DISC帮领导者巧用人用对人 曹将：DISC 分析简述 | 微信 曹将：DISC 与人际沟通 | 微信","tags":[{"name":"生活闲读","slug":"生活闲读","permalink":"http://wiki.maweizhuo.com/tags/生活闲读/"},{"name":"DISC","slug":"DISC","permalink":"http://wiki.maweizhuo.com/tags/DISC/"}],"categories":[{"name":"生活闲读","slug":"生活闲读","permalink":"http://wiki.maweizhuo.com/categories/生活闲读/"}]}]}